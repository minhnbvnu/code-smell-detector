function __divdi3(sp)
{
	var i7;
	var fp = sp>>2;
	var r0;
	var r1;
	var r2;
	var r3;
	var r4;
	var r5;
	var r6;
	var r7;
	var r8;
	var r9;
	var r10;
	var r11;
var __label__ = 0;
	i7 = sp + -24;var g0 = i7>>2; // save stack
	r0 = heap32[(fp+3)];
	r1 = heap32[(fp+1)];
	r2 = r1 >> 31;
	r3 = heap32[(fp)];
	r4 = r0 >> 31;
	r5 = heap32[(fp+2)];
	r6 = r2 ^ r1;
	r3 = r2 ^ r3;
	r7 = r4 ^ r0;
	r5 = r4 ^ r5;
	r8 = 1;
	r9 = 0;
	r6 = (r6 - r2)|0;
	r10 = uint(r3) < uint(r2) ? r8 : r9;
	r7 = (r7 - r4)|0;
	r11 = uint(r5) < uint(r4) ? r8 : r9;
	r2 = (r3 - r2)|0;
	r3 = (r6 - r10)|0;
	r4 = (r5 - r4)|0;
	r5 = (r7 - r11)|0;
	heap32[(g0)] = r2;
	heap32[(g0+1)] = r3;
	heap32[(g0+2)] = r4;
	heap32[(g0+3)] = r5;
	heap32[(g0+4)] = 0;
	r0 = r0 ^ r1;
	__udivmoddi4(i7);
	r0 = r0 >> 31;
	r1 = r_g0 ^ r0;
	r2 = r_g1 ^ r0;
	r2 = (r2 - r0)|0;
	r3 = uint(r1) < uint(r0) ? r8 : r9;
	r0 = (r1 - r0)|0;
	r1 = (r2 - r3)|0;
	r_g0 = r0;
	r_g1 = r1;
	return;
}