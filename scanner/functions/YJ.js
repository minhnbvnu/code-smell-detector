function YJ(n){let{inputs:t,backend:e,attrs:i}=n,{x:r}=t,{axis:o,keepDims:s}=i,a=r.shape.length,l=[],c=R.parseAxisParam(o,r.shape),u=c,h=F.getAxesPermutation(u,a),p=r;h!=null&&(p=Pe({inputs:{x:r},backend:e,attrs:{perm:h}}),u=F.getInnerMostAxes(u.length,a),l.push(p)),F.assertAxesAreInnerMostDims("prod",u,a);let d;if(e.shouldExecuteOnCPU([p])){let f=e.texData.get(p.dataId).values,{outVals:m,outShape:x,outDtype:g}=p6(p.shape,p.dtype,f,u);d=e.makeTensorInfo(x,g,m)}else{let[f,m]=F.computeOutAndReduceShapes(p.shape,u),x=R.sizeFromShape(m),g=Et({inputs:{x:p},backend:e,attrs:{shape:[-1,x]}}),v=Qs(r.dtype),b=ci(g,v,"prod",e);d=Et({inputs:{x:b},backend:e,attrs:{shape:f}}),l.push(g),l.push(b)}if(s){l.push(d);let f=F.expandShapeToKeepDim(d.shape,c);d=Et({inputs:{x:d},backend:e,attrs:{shape:f}})}return l.forEach(f=>e.disposeIntermediateTensorInfo(f)),d}