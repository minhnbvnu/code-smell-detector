function _vorbis_analysis_blockout($v,$vb) {
 $v = $v|0;
 $vb = $vb|0;
 var $$ = 0, $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre10 = 0, $$pre11 = 0, $$pre12 = 0, $$pre13 = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $i$07 = 0, $or$cond = 0, $reap$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($v)) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($v)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($v)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($3) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13|0) / 2)&-1;
 $15 = (($9) - ($14))|0;
 $16 = ((($vb)) + 104|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($v)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $$0 = 0;
  return ($$0|0);
 }
 $21 = ((($v)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(-1);
 if ($23) {
  $$0 = 0;
  return ($$0|0);
 }
 $24 = (__ve_envelope_search($v)|0);
 $25 = ($24|0)==(-1);
 do {
  if ($25) {
   $26 = HEAP32[$21>>2]|0;
   $27 = ($26|0)==(0);
   if ($27) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $28 = ((($v)) + 44|0);
    HEAP32[$28>>2] = 0;
    $$pre$phiZ2D = $28;$41 = 0;
    break;
   }
  } else {
   $29 = HEAP32[$3>>2]|0;
   $30 = ((($3)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($29|0)==($31|0);
   $33 = ((($v)) + 44|0);
   if ($32) {
    HEAP32[$33>>2] = 0;
    $$pre$phiZ2D = $33;$41 = 0;
    break;
   } else {
    HEAP32[$33>>2] = $24;
    $$pre$phiZ2D = $33;$41 = $24;
    break;
   }
  }
 } while(0);
 $34 = HEAP32[$8>>2]|0;
 $35 = HEAP32[$10>>2]|0;
 $36 = (($3) + ($35<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($38) + ($34))|0;
 $40 = (($3) + ($41<<2)|0);
 $42 = HEAP32[$40>>2]|0;
 $43 = (($42|0) / 4)&-1;
 $44 = (($39) + ($43))|0;
 $45 = (($42|0) / 2)&-1;
 $46 = (($44) + ($45))|0;
 $47 = ((($v)) + 20|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)<($46|0);
 if ($49) {
  $$0 = 0;
  return ($$0|0);
 }
 $50 = ((($vb)) + 84|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0|0);
 if (!($52)) {
  $reap$01$i = $51;
  while(1) {
   $53 = ((($reap$01$i)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = HEAP32[$reap$01$i>>2]|0;
   _free($55);
   _free($reap$01$i);
   $56 = ($54|0)==(0|0);
   if ($56) {
    break;
   } else {
    $reap$01$i = $54;
   }
  }
 }
 $57 = ((($vb)) + 80|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)==(0);
 if (!($59)) {
  $60 = ((($vb)) + 68|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($vb)) + 76|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($58))|0;
  $65 = (_realloc($61,$64)|0);
  HEAP32[$60>>2] = $65;
  $66 = HEAP32[$57>>2]|0;
  $67 = HEAP32[$62>>2]|0;
  $68 = (($67) + ($66))|0;
  HEAP32[$62>>2] = $68;
  HEAP32[$57>>2] = 0;
 }
 $69 = ((($vb)) + 72|0);
 HEAP32[$69>>2] = 0;
 HEAP32[$50>>2] = 0;
 $70 = ((($v)) + 36|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($vb)) + 24|0);
 HEAP32[$72>>2] = $71;
 $73 = HEAP32[$10>>2]|0;
 $74 = ((($vb)) + 28|0);
 HEAP32[$74>>2] = $73;
 $75 = HEAP32[$$pre$phiZ2D>>2]|0;
 $76 = ((($vb)) + 32|0);
 HEAP32[$76>>2] = $75;
 $77 = ($73|0)==(0);
 do {
  if ($77) {
   $81 = (__ve_envelope_mark($v)|0);
   $82 = ($81|0)==(0);
   $83 = ((($17)) + 8|0);
   if ($82) {
    HEAP32[$83>>2] = 1;
    break;
   } else {
    HEAP32[$83>>2] = 0;
    break;
   }
  } else {
   $78 = ($71|0)==(0);
   $79 = ($75|0)==(0);
   $or$cond = $78 | $79;
   $80 = ((($17)) + 8|0);
   if ($or$cond) {
    HEAP32[$80>>2] = 0;
    break;
   } else {
    HEAP32[$80>>2] = 1;
    break;
   }
  }
 } while(0);
 $84 = ((($vb)) + 64|0);
 HEAP32[$84>>2] = $v;
 $85 = ((($v)) + 64|0);
 $86 = $85;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($86) + 4)|0;
 $90 = $89;
 $91 = HEAP32[$90>>2]|0;
 $92 = (_i64Add(($88|0),($91|0),1,0)|0);
 $93 = tempRet0;
 $94 = $85;
 $95 = $94;
 HEAP32[$95>>2] = $92;
 $96 = (($94) + 4)|0;
 $97 = $96;
 HEAP32[$97>>2] = $93;
 $98 = ((($vb)) + 56|0);
 $99 = $98;
 $100 = $99;
 HEAP32[$100>>2] = $88;
 $101 = (($99) + 4)|0;
 $102 = $101;
 HEAP32[$102>>2] = $91;
 $103 = ((($v)) + 56|0);
 $104 = $103;
 $105 = $104;
 $106 = HEAP32[$105>>2]|0;
 $107 = (($104) + 4)|0;
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = ((($vb)) + 48|0);
 $111 = $110;
 $112 = $111;
 HEAP32[$112>>2] = $106;
 $113 = (($111) + 4)|0;
 $114 = $113;
 HEAP32[$114>>2] = $109;
 $115 = HEAP32[$10>>2]|0;
 $116 = (($3) + ($115<<2)|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ((($vb)) + 36|0);
 HEAP32[$118>>2] = $117;
 $119 = ((($17)) + 4|0);
 $120 = +HEAPF32[$119>>2];
 $121 = +HEAPF32[$7>>2];
 $122 = $120 > $121;
 if ($122) {
  HEAPF32[$7>>2] = $120;
  $123 = $120;
 } else {
  $123 = $121;
 }
 $124 = (+__vp_ampmax_decay($123,$v));
 HEAPF32[$7>>2] = $124;
 HEAPF32[$119>>2] = $124;
 $125 = ((($1)) + 4|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $126 << 2;
 $128 = (($127) + 7)|0;
 $129 = $128 & -8;
 $130 = HEAP32[$69>>2]|0;
 $131 = (($129) + ($130))|0;
 $132 = ((($vb)) + 76|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = ($131|0)>($133|0);
 $135 = ((($vb)) + 68|0);
 $136 = HEAP32[$135>>2]|0;
 if ($134) {
  $137 = ($136|0)==(0|0);
  if (!($137)) {
   $138 = $136;
   $139 = (_malloc(8)|0);
   $140 = HEAP32[$57>>2]|0;
   $141 = (($140) + ($130))|0;
   HEAP32[$57>>2] = $141;
   $142 = HEAP32[$50>>2]|0;
   $143 = ((($139)) + 4|0);
   HEAP32[$143>>2] = $142;
   HEAP32[$139>>2] = $138;
   HEAP32[$50>>2] = $139;
  }
  HEAP32[$132>>2] = $129;
  $144 = (_malloc($129)|0);
  HEAP32[$135>>2] = $144;
  HEAP32[$69>>2] = 0;
  $$pre = HEAP32[$125>>2]|0;
  $146 = $144;$147 = 0;$150 = $$pre;$155 = $129;
 } else {
  $146 = $136;$147 = $130;$150 = $126;$155 = $133;
 }
 $145 = (($146) + ($147)|0);
 $148 = (($147) + ($129))|0;
 HEAP32[$69>>2] = $148;
 HEAP32[$vb>>2] = $145;
 $149 = $150 << 2;
 $151 = (($149) + 7)|0;
 $152 = $151 & -8;
 $153 = (($152) + ($148))|0;
 $154 = ($153|0)>($155|0);
 if ($154) {
  $156 = ($146|0)==(0|0);
  if (!($156)) {
   $157 = $146;
   $158 = (_malloc(8)|0);
   $159 = HEAP32[$57>>2]|0;
   $160 = (($159) + ($148))|0;
   HEAP32[$57>>2] = $160;
   $161 = HEAP32[$50>>2]|0;
   $162 = ((($158)) + 4|0);
   HEAP32[$162>>2] = $161;
   HEAP32[$158>>2] = $157;
   HEAP32[$50>>2] = $158;
  }
  HEAP32[$132>>2] = $152;
  $163 = (_malloc($152)|0);
  HEAP32[$135>>2] = $163;
  HEAP32[$69>>2] = 0;
  $$pre10 = HEAP32[$125>>2]|0;
  $165 = $163;$166 = 0;$168 = $$pre10;$292 = $152;
 } else {
  $165 = $146;$166 = $148;$168 = $150;$292 = $155;
 }
 $164 = (($165) + ($166)|0);
 $167 = (($166) + ($152))|0;
 HEAP32[$69>>2] = $167;
 HEAP32[$17>>2] = $164;
 $169 = ($168|0)>(0);
 L52: do {
  if ($169) {
   $170 = ((($v)) + 8|0);
   $177 = $167;$179 = $292;$180 = $165;$i$07 = 0;
   while(1) {
    $171 = HEAP32[$118>>2]|0;
    $172 = (($171) + ($15))|0;
    $173 = $172 << 2;
    $174 = (($173) + 7)|0;
    $175 = $174 & -8;
    $176 = (($175) + ($177))|0;
    $178 = ($176|0)>($179|0);
    if ($178) {
     $181 = ($180|0)==(0|0);
     if (!($181)) {
      $182 = $180;
      $183 = (_malloc(8)|0);
      $184 = HEAP32[$57>>2]|0;
      $185 = (($184) + ($177))|0;
      HEAP32[$57>>2] = $185;
      $186 = HEAP32[$50>>2]|0;
      $187 = ((($183)) + 4|0);
      HEAP32[$187>>2] = $186;
      HEAP32[$183>>2] = $182;
      HEAP32[$50>>2] = $183;
     }
     HEAP32[$132>>2] = $175;
     $188 = (_malloc($175)|0);
     HEAP32[$135>>2] = $188;
     HEAP32[$69>>2] = 0;
     $190 = $188;$191 = 0;
    } else {
     $190 = $180;$191 = $177;
    }
    $189 = (($190) + ($191)|0);
    $192 = (($191) + ($175))|0;
    HEAP32[$69>>2] = $192;
    $193 = HEAP32[$17>>2]|0;
    $194 = (($193) + ($i$07<<2)|0);
    HEAP32[$194>>2] = $189;
    $195 = HEAP32[$17>>2]|0;
    $196 = (($195) + ($i$07<<2)|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = HEAP32[$170>>2]|0;
    $199 = (($198) + ($i$07<<2)|0);
    $200 = HEAP32[$199>>2]|0;
    _memcpy(($197|0),($200|0),($173|0))|0;
    $201 = HEAP32[$17>>2]|0;
    $202 = (($201) + ($i$07<<2)|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = (($203) + ($15<<2)|0);
    $205 = HEAP32[$vb>>2]|0;
    $206 = (($205) + ($i$07<<2)|0);
    HEAP32[$206>>2] = $204;
    $207 = (($i$07) + 1)|0;
    $208 = HEAP32[$125>>2]|0;
    $209 = ($207|0)<($208|0);
    if (!($209)) {
     break L52;
    }
    $$pre11 = HEAP32[$69>>2]|0;
    $$pre12 = HEAP32[$132>>2]|0;
    $$pre13 = HEAP32[$135>>2]|0;
    $177 = $$pre11;$179 = $$pre12;$180 = $$pre13;$i$07 = $207;
   }
  }
 } while(0);
 $210 = HEAP32[$21>>2]|0;
 $211 = ($210|0)==(0);
 if (!($211)) {
  $212 = HEAP32[$8>>2]|0;
  $213 = ($212|0)<($210|0);
  if (!($213)) {
   HEAP32[$21>>2] = -1;
   $214 = ((($vb)) + 44|0);
   HEAP32[$214>>2] = 1;
   $$0 = 1;
   return ($$0|0);
  }
 }
 $215 = ((($3)) + 4|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = (($216|0) / 2)&-1;
 $218 = (($44) - ($217))|0;
 $219 = ($218|0)>(0);
 if (!($219)) {
  $$0 = 1;
  return ($$0|0);
 }
 $220 = HEAP32[$5>>2]|0;
 __ve_envelope_shift($220,$218);
 $221 = HEAP32[$47>>2]|0;
 $222 = (($221) - ($218))|0;
 HEAP32[$47>>2] = $222;
 $223 = HEAP32[$125>>2]|0;
 $224 = ($223|0)>(0);
 if ($224) {
  $225 = ((($v)) + 8|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = HEAP32[$226>>2]|0;
  $228 = (($227) + ($218<<2)|0);
  $229 = $222 << 2;
  _memmove(($227|0),($228|0),($229|0))|0;
  $230 = HEAP32[$125>>2]|0;
  $231 = ($230|0)>(1);
  if ($231) {
   $234 = 1;
   while(1) {
    $$pre15 = HEAP32[$47>>2]|0;
    $232 = HEAP32[$225>>2]|0;
    $233 = (($232) + ($234<<2)|0);
    $235 = HEAP32[$233>>2]|0;
    $236 = (($235) + ($218<<2)|0);
    $237 = $$pre15 << 2;
    _memmove(($235|0),($236|0),($237|0))|0;
    $238 = (($234) + 1)|0;
    $239 = HEAP32[$125>>2]|0;
    $240 = ($238|0)<($239|0);
    if ($240) {
     $234 = $238;
    } else {
     break;
    }
   }
  }
 }
 $241 = HEAP32[$10>>2]|0;
 HEAP32[$70>>2] = $241;
 $242 = HEAP32[$$pre$phiZ2D>>2]|0;
 HEAP32[$10>>2] = $242;
 HEAP32[$8>>2] = $217;
 $243 = HEAP32[$21>>2]|0;
 $244 = ($243|0)==(0);
 if ($244) {
  $278 = ($218|0)<(0);
  $279 = $278 << 31 >> 31;
  $280 = $103;
  $281 = $280;
  $282 = HEAP32[$281>>2]|0;
  $283 = (($280) + 4)|0;
  $284 = $283;
  $285 = HEAP32[$284>>2]|0;
  $286 = (_i64Add(($282|0),($285|0),($218|0),($279|0))|0);
  $287 = tempRet0;
  $288 = $103;
  $289 = $288;
  HEAP32[$289>>2] = $286;
  $290 = (($288) + 4)|0;
  $291 = $290;
  HEAP32[$291>>2] = $287;
  $$0 = 1;
  return ($$0|0);
 }
 $245 = (($243) - ($218))|0;
 $246 = ($245|0)<(1);
 $$ = $246 ? -1 : $245;
 HEAP32[$21>>2] = $$;
 $247 = ($$|0)>($217|0);
 if ($247) {
  $264 = ($218|0)<(0);
  $265 = $264 << 31 >> 31;
  $266 = $103;
  $267 = $266;
  $268 = HEAP32[$267>>2]|0;
  $269 = (($266) + 4)|0;
  $270 = $269;
  $271 = HEAP32[$270>>2]|0;
  $272 = (_i64Add(($268|0),($271|0),($218|0),($265|0))|0);
  $273 = tempRet0;
  $274 = $103;
  $275 = $274;
  HEAP32[$275>>2] = $272;
  $276 = (($274) + 4)|0;
  $277 = $276;
  HEAP32[$277>>2] = $273;
  $$0 = 1;
  return ($$0|0);
 } else {
  $248 = (($$) + ($218))|0;
  $249 = (($248) - ($217))|0;
  $250 = ($249|0)<(0);
  $251 = $250 << 31 >> 31;
  $252 = $103;
  $253 = $252;
  $254 = HEAP32[$253>>2]|0;
  $255 = (($252) + 4)|0;
  $256 = $255;
  $257 = HEAP32[$256>>2]|0;
  $258 = (_i64Add(($254|0),($257|0),($249|0),($251|0))|0);
  $259 = tempRet0;
  $260 = $103;
  $261 = $260;
  HEAP32[$261>>2] = $258;
  $262 = (($260) + 4)|0;
  $263 = $262;
  HEAP32[$263>>2] = $259;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}