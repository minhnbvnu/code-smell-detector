function _ZN15btTransformUtil18integrateTransformERK11btTransformRK9btVector3S5_fRS0_(sp)
{
	var i7;
	var fp = sp>>2;
	var r0;
	var r1;
	var r2;
	var f0;
	var f1;
	var f2;
	var f3;
	var f4;
	var f5;
	var f6;
	var f7;
	var f8;
	var f9;
	var f10;
	var f11;
	var f12;
	var f13;
var __label__ = 0;
	i7 = sp + -32;var g0 = i7>>2; // save stack
	r0 = heap32[(fp)];
	r1 = r0 >> 2;
	f0 = heapFloat[(fp+5)];
	f1 = heapFloat[(fp+1)];
	r2 = heap32[(fp+6)];
	f2 = heapFloat[(fp+2)];
	f1 = f1*f0;
	f3 = heapFloat[(r1+12)];
	f4 = heapFloat[(r1+14)];
	f5 = heapFloat[(r1+13)];
	f6 = heapFloat[(fp+3)];
	f2 = f2*f0;
	r1 = r2 >> 2;
	f1 = f3+f1;
	f3 = f6*f0;
	f2 = f5+f2;
	heapFloat[(r1+12)] = f1;
	f1 = f4+f3;
	heapFloat[(r1+13)] = f2;
	r2 = heap32[(fp+4)];
	heapFloat[(r1+14)] = f1;
	r2 = r2 >> 2;
	heap32[(r1+15)] = 0;
	f1 = heapFloat[(r2)];
	f2 = heapFloat[(r2+1)];
	f3 = heapFloat[(r2+2)];
	f1 = f1*f1;
	f2 = f2*f2;
	f1 = f1+f2;
	f2 = f3*f3;
	f1 = f1+f2;
	heapFloat[(g0)] = f1;
	sqrtf(i7);
	f1 = f_g0;
	f2 = f1*f0;
	f3 =       0.78539818525314331;
	if(f2 >f3) //_LBB535_2
{
	f1 = f3/f0;
}
	f2 =     0.0010000000474974513;
	if(f1 >=f2) //_LBB535_5
{
	f2 =                       0.5;
	f2 = f1*f2;
	f2 = f2*f0;
	heapFloat[(g0)] = f2;
	sinf(i7);
	f3 = heapFloat[(r2+2)];
	f2 = f_g0/f1;
	f5 = heapFloat[(r2+1)];
	f6 = heapFloat[(r2)];
	f4 = f3*f2;
	f3 = f5*f2;
	f2 = f6*f2;
}
else{
	f2 = f0*f0;
	f2 = f2*f0;
	f3 =      -0.02083333395421505;
	f2 = f2*f3;
	f3 =                       0.5;
	f2 = f2*f1;
	f3 = f0*f3;
	f2 = f2*f1;
	f4 = heapFloat[(r2+2)];
	f2 = f3+f2;
	f3 = heapFloat[(r2+1)];
	f5 = heapFloat[(r2)];
	f4 = f4*f2;
	f3 = f3*f2;
	f2 = f5*f2;
}
	f0 = f1*f0;
	f1 =                       0.5;
	f0 = f0*f1;
	heapFloat[(g0)] = f0;
	cosf(i7);
	f0 = f_g0;
	r2 = sp + -16;
	heap32[(g0)] = r0;
	heap32[(g0+1)] = r2;
	_ZNK11btMatrix3x311getRotationER12btQuaternion(i7);
	r0 = r2 >> 2;
	f1 = heapFloat[(fp+-4)];
	f5 = heapFloat[(r0+3)];
	f6 = heapFloat[(r0+1)];
	f7 = heapFloat[(r0+2)];
	f8 = f0*f6;
	f9 = f3*f5;
	f10 = f0*f1;
	f11 = f2*f5;
	f12 = f0*f7;
	f13 = f4*f5;
	f8 = f8+f9;
	f9 = f4*f1;
	f10 = f10+f11;
	f11 = f3*f7;
	f0 = f0*f5;
	f5 = f2*f1;
	f12 = f12+f13;
	f13 = f2*f6;
	f8 = f8+f9;
	f2 = f2*f7;
	f9 = f10+f11;
	f10 = f4*f6;
	f2 = f8-f2;
	f8 = f9-f10;
	f0 = f0-f5;
	f5 = f3*f6;
	f6 = f12+f13;
	f1 = f3*f1;
	f1 = f6-f1;
	f3 = f8*f8;
	f6 = f2*f2;
	f0 = f0-f5;
	f4 = f4*f7;
	f0 = f0-f4;
	f3 = f3+f6;
	f4 = f1*f1;
	f3 = f3+f4;
	f4 = f0*f0;
	f3 = f3+f4;
	heapFloat[(g0)] = f3;
	sqrtf(i7);
	f3 = f_g0;
	f4 =                         0;
	if(f3 !=f4) //_LBB535_8
{
	f4 =                         1;
	f3 = f4/f3;
	f5 = f8*f3;
	f2 = f2*f3;
	f1 = f1*f3;
	f6 = f5*f5;
	f7 = f2*f2;
	f0 = f0*f3;
	f3 = f6+f7;
	f6 = f1*f1;
	f3 = f3+f6;
	f6 = f0*f0;
	f7 =                         2;
	f3 = f3+f6;
	f3 = f7/f3;
	f6 = f1*f3;
	f7 = f2*f3;
	f8 = f2*f7;
	f1 = f1*f6;
	f9 = f8+f1;
	f9 = f4-f9;
	f10 = f5*f7;
	f11 = f0*f6;
	f12 = f5*f6;
	f7 = f0*f7;
	f13 = f10-f11;
	heapFloat[(r1)] = f9;
	f3 = f5*f3;
	f9 = f12+f7;
	heapFloat[(r1+1)] = f13;
	f5 = f5*f3;
	heapFloat[(r1+2)] = f9;
	f1 = f5+f1;
	f9 = f10+f11;
	heap32[(r1+3)] = 0;
	f2 = f2*f6;
	f0 = f0*f3;
	f1 = f4-f1;
	heapFloat[(r1+4)] = f9;
	f3 = f2-f0;
	heapFloat[(r1+5)] = f1;
	heapFloat[(r1+6)] = f3;
	f1 = f12-f7;
	heap32[(r1+7)] = 0;
	f3 = f5+f8;
	f0 = f2+f0;
	heapFloat[(r1+8)] = f1;
	f1 = f4-f3;
	heapFloat[(r1+9)] = f0;
	heapFloat[(r1+10)] = f1;
	heap32[(r1+11)] = 0;
	return;
}
else{
	r1 = _2E_str584;
	r0 = _2E_str685;
	heap32[(g0)] = r1;
	heap32[(g0+1)] = r0;
	heap32[(g0+2)] = 188;
	_assert(i7);
}
}