function dX(n){let{inputs:t,backend:e,attrs:i}=n,{images:r,dy:o}=t,{alignCorners:s}=i;ut([o,r],"resizeNearestNeighborGrad");let a=R.computeStrides(r.shape),l=R.computeStrides(o.shape),[c,u,h,p]=r.shape,[,d,f]=o.shape,m=new Float32Array(c*u*h*p),x=e.data.get(o.dataId).values,g=[s&&d>1?u-1:u,s&&f>1?h-1:h],v=[s&&d>1?d-1:d,s&&f>1?f-1:f],b=g[0]/v[0],y=g[1]/v[1],_=1/b,S=1/y,E=Math.ceil(_)*2+2,M=Math.ceil(S)*2+2;for(let P=0;P<c;P++){let D=P*a[0];for(let w=0;w<u;w++){let I=D+w*a[1],N=Math.floor(w*_),L=Math.floor(N-E/2);for(let O=0;O<h;O++){let z=I+O*a[2],V=Math.floor(O*S),$=Math.floor(V-M/2);for(let X=0;X<p;X++){let W=0;for(let K=0;K<E;K++){let Z=K+L;if(Z<0||Z>=d)continue;let Y=D+Z*l[1],tt=Z*b,q=Math.min(u-1,s?Math.round(tt):Math.floor(tt));if(w===q)for(let et=0;et<M;et++){let it=et+$;if(it<0||it>=f)continue;let at=Y+it*l[2],nt=it*y,_t=Math.min(h-1,s?Math.round(nt):Math.floor(nt));O===_t&&(W+=x[at+X])}}m[z+X]=W}}}}return e.makeTensorInfo(r.shape,r.dtype,m)}