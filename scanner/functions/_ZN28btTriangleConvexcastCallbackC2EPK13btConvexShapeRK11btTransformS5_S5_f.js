function _ZN28btTriangleConvexcastCallbackC2EPK13btConvexShapeRK11btTransformS5_S5_f(sp)
{
	var i7;
	var fp = sp>>2;
	var r0;
	var r1;
	var r2;
	var r3;
var __label__ = 0;
	i7 = sp + 0;var g0 = i7>>2; // save stack
	r0 = heap32[(fp)];
	r1 = _ZTV28btTriangleConvexcastCallback;
	r0 = r0 >> 2;
	r1 = (r1 + 8)|0;
	r2 = heap32[(fp+2)];
	r3 = heap32[(fp+1)];
	heap32[(r0)] = r1;
	r1 = r2 >> 2;
	heap32[(r0+1)] = r3;
	heap32[(r0+2)] = heap32[(r1)];
	heap32[(r0+3)] = heap32[(r1+1)];
	heap32[(r0+4)] = heap32[(r1+2)];
	heap32[(r0+5)] = heap32[(r1+3)];
	heap32[(r0+6)] = heap32[(r1+4)];
	heap32[(r0+7)] = heap32[(r1+5)];
	heap32[(r0+8)] = heap32[(r1+6)];
	heap32[(r0+9)] = heap32[(r1+7)];
	heap32[(r0+10)] = heap32[(r1+8)];
	heap32[(r0+11)] = heap32[(r1+9)];
	heap32[(r0+12)] = heap32[(r1+10)];
	heap32[(r0+13)] = heap32[(r1+11)];
	heap32[(r0+14)] = heap32[(r1+12)];
	heap32[(r0+15)] = heap32[(r1+13)];
	r2 = heap32[(fp+3)];
	heap32[(r0+16)] = heap32[(r1+14)];
	r2 = r2 >> 2;
	heap32[(r0+17)] = heap32[(r1+15)];
	heap32[(r0+18)] = heap32[(r2)];
	heap32[(r0+19)] = heap32[(r2+1)];
	heap32[(r0+20)] = heap32[(r2+2)];
	heap32[(r0+21)] = heap32[(r2+3)];
	heap32[(r0+22)] = heap32[(r2+4)];
	heap32[(r0+23)] = heap32[(r2+5)];
	heap32[(r0+24)] = heap32[(r2+6)];
	heap32[(r0+25)] = heap32[(r2+7)];
	heap32[(r0+26)] = heap32[(r2+8)];
	heap32[(r0+27)] = heap32[(r2+9)];
	heap32[(r0+28)] = heap32[(r2+10)];
	heap32[(r0+29)] = heap32[(r2+11)];
	heap32[(r0+30)] = heap32[(r2+12)];
	heap32[(r0+31)] = heap32[(r2+13)];
	r1 = heap32[(fp+4)];
	heap32[(r0+32)] = heap32[(r2+14)];
	r1 = r1 >> 2;
	heap32[(r0+33)] = heap32[(r2+15)];
	heap32[(r0+34)] = heap32[(r1)];
	heap32[(r0+35)] = heap32[(r1+1)];
	heap32[(r0+36)] = heap32[(r1+2)];
	heap32[(r0+37)] = heap32[(r1+3)];
	heap32[(r0+38)] = heap32[(r1+4)];
	heap32[(r0+39)] = heap32[(r1+5)];
	heap32[(r0+40)] = heap32[(r1+6)];
	heap32[(r0+41)] = heap32[(r1+7)];
	heap32[(r0+42)] = heap32[(r1+8)];
	heap32[(r0+43)] = heap32[(r1+9)];
	heap32[(r0+44)] = heap32[(r1+10)];
	heap32[(r0+45)] = heap32[(r1+11)];
	heap32[(r0+46)] = heap32[(r1+12)];
	heap32[(r0+47)] = heap32[(r1+13)];
	heap32[(r0+48)] = heap32[(r1+14)];
	heap32[(r0+49)] = heap32[(r1+15)];
	heap32[(r0+50)] = 1065353216;
	heap32[(r0+51)] = heap32[(fp+5)];
	return;
}