function U3e(){return O.useEffect(()=>{window.scrollTo(0,0)},[]),w(oe,{children:[o("h1",{children:"Intro"}),w(de,{children:["First lets take a look at whats possible with informed. Below is an example where we wrapped informed around Adobe's"," ",o("a",{href:"https://react-spectrum.adobe.com/react-spectrum/index.html",children:"desgin-system"}),"."]}),w(de,{type:"notice",children:["Those components got defined once inside `YourComponents` directory. You will see how this was done later inside the"," ",o(ri,{href:"/getting-started/setup",children:"setup"})," docs."]}),o(Ee,{leftHeader:o(Z3e,{}),rightHeader:o("h3",{children:"Code:"}),left:o(j3e,{}),right:o(N,{links:!0,input1:W3e})}),w(de,{children:["Whats going on here? Basically informed manages form state for you, and allows you to easily hook ito its state managemenet with the use of",o("code",{children:"useField"}),o("br",{}),o("br",{}),"Above, we imported inputs that were already wrapped and simply rendered them on the page.",o("br",{}),o("br",{}),o("strong",{children:"This is the way!"})," You should most of the time not even realize you are using a form library üòÅ"]}),o("hr",{}),o("h1",{children:"Capabilities"}),w(de,{children:["Informed is cabable of A LOT of cool things! The below example shows off many of those cababilites in one form.",o("br",{}),o("br",{}),w("ul",{children:[w("li",{children:["Arrays: ability to render dynamic arrays of fields"," ",o("code",{children:"[ 'a', 'b' ]"})," or"," ",o("code",{children:"[ { name: 'Joe', age: 29 }, { name: 'Hope', age: 24 }]"})]}),o("li",{children:"Relevance: ability to render fields conditionally depending on the state of other parts of the form"}),o("li",{children:"JSPAN: ability to easily and intuitively manipulate form state"}),o("li",{children:"Formatting: ability to perform display formatting, where the format shown to user can differ from the state of the values stored"}),o("li",{children:"Validation: ability to perform both synchronous and asynchronous validation in a controlled manner"}),o("li",{children:"Api: ability to manipulate the form state both inside and outside the context of the form"}),o("li",{children:"State: ability to access field and form data"}),o("li",{children:"Multistep: ability to create dynamic multistep forms"}),o("li",{children:"Scope: ability to scope ( group ) fields"}),o("li",{children:"Schema: ability to render forms based on pure JSON schema"}),o("li",{children:"Dynaic: ability to hide and show fields ( render and unrender ) and either cleanup or maintain state of unmounted fields"}),o("li",{children:"Debugging: ability to easily debug users state as well as internals of the library"}),w("li",{children:["Nesting: ability to have highly nested value structure"," ",o("code",{children:"state.values.friends[1].brother.parents.cars[0].model"})]})]})]}),o(V3e,{}),o("hr",{}),o("h1",{children:"How do I start!?"}),o(de,{children:"In order to use informed all you need to do is wrap your own inputs with informed via a `useField` hook."}),w(de,{type:"notice",children:["You do this one time and then can use your form inputs as normal JSX or via schema! Lets go get ",o(ri,{href:"/getting-started/setup",children:"SETUP"})]}),o("br",{}),o("br",{})]})}