function TJ(n){let{inputs:t,backend:e,attrs:i}=n,{x:r}=t,{axis:o,keepDims:s}=i,a=r.shape.length,l=R.parseAxisParam(o,r.shape),c=l,u=F.getAxesPermutation(c,a),h=r;u!=null&&(h=Pe({inputs:{x:r},backend:e,attrs:{perm:u}}),c=F.getInnerMostAxes(c.length,r.shape.length)),F.assertAxesAreInnerMostDims("min",c,a);let[p,d]=F.computeOutAndReduceShapes(h.shape,c),f=R.sizeFromShape(d),m=Et({inputs:{x:h},backend:e,attrs:{shape:[-1,f]}}),x=ci(m,m.dtype,"min",e),g;if(s){let v=F.expandShapeToKeepDim(p,l);g=Et({inputs:{x},backend:e,attrs:{shape:v}})}else g=Et({inputs:{x},backend:e,attrs:{shape:p}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(x),u!=null&&e.disposeIntermediateTensorInfo(h),g}