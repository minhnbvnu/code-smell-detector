function useSharedState(stateId,defaultState){var api=useStorybookApi(),state=orDefault(api.getAddonState(stateId),addonStateCache[stateId]?addonStateCache[stateId]:defaultState),setState=function setState(s,options){addonStateCache[stateId]&&(addonStateCache[stateId]=s),api.setAddonState(stateId,s,options)},allListeners=Object(react.useMemo)((function(){var _stateChangeHandlers,_stateInitializationH,stateChangeHandlers=(esm_defineProperty(_stateChangeHandlers={},"".concat(esm.SHARED_STATE_CHANGED,"-client-").concat(stateId),(function client(s){return setState(s)})),esm_defineProperty(_stateChangeHandlers,"".concat(esm.SHARED_STATE_SET,"-client-").concat(stateId),(function client(s){return setState(s)})),_stateChangeHandlers),stateInitializationHandlers=(esm_defineProperty(_stateInitializationH={},esm.SET_STORIES,(function(){var currentState=api.getAddonState(stateId);currentState?(addonStateCache[stateId]=currentState,api.emit("".concat(esm.SHARED_STATE_SET,"-manager-").concat(stateId),currentState)):addonStateCache[stateId]?(setState(addonStateCache[stateId]),api.emit("".concat(esm.SHARED_STATE_SET,"-manager-").concat(stateId),addonStateCache[stateId])):void 0!==defaultState&&(setState(defaultState),addonStateCache[stateId]=defaultState,api.emit("".concat(esm.SHARED_STATE_SET,"-manager-").concat(stateId),defaultState))})),esm_defineProperty(_stateInitializationH,esm.STORY_CHANGED,(function(){var currentState=api.getAddonState(stateId);void 0!==currentState&&api.emit("".concat(esm.SHARED_STATE_SET,"-manager-").concat(stateId),currentState)})),_stateInitializationH);return Object.assign({},stateChangeHandlers,stateInitializationHandlers)}),[stateId]),emit=esm_useChannel(allListeners);return[state,function(newStateOrMerger,options){setState(newStateOrMerger,options),emit("".concat(esm.SHARED_STATE_CHANGED,"-manager-").concat(stateId),newStateOrMerger)}]}