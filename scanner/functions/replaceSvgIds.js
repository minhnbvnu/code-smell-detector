function replaceSvgIds(svg, prefix) {
  var idRxp = /id="([^"]+)_[0-9]+_"/g; // matches ids generated by AI
  var hexRxp = /_x([1-7][0-9A-F])_/g;  // matches char codes inserted by AI
  var dupes = [];
  var msg;
  prefix = prefix || '';
  svgIds = svgIds || {};
  svg = svg.replace(idRxp, replaceId);
  if (dupes.length > 0) {
    msg = truncateString(dupes.sort().join(', '), 65, true);
    warnOnce('Found duplicate SVG ' + (dupes.length == 1 ? 'id' : 'ids') + ': ' + msg);
  }
  return svg;

  function replaceId(str, id) {
    var fixedId = id.replace(hexRxp, replaceHexCode);
    var uniqId = uniqify(fixedId);
    return 'id="' + prefix + uniqId + '" data-name="' + fixedId + '"';
  }

  function replaceHexCode(str, hex) {
    return String.fromCharCode(parseInt(hex, 16));
  }

  // resolve id collisions by appending a string
  function uniqify(origId) {
    var id = origId,
        n = 1;
    while (id in svgIds) {
      n++;
      id = origId + '-' + n;
    }
    if (n == 2) {
      dupes.push(origId);
    }
    svgIds[id] = true;
    return id;
  }
}