function _ZN35btSequentialImpulseConstraintSolver43resolveSplitPenetrationImpulseCacheFriendlyER11btRigidBodyS1_RK18btSolverConstraint(sp)
{
	var i7;
	var fp = sp>>2;
	var r0;
	var r1;
	var r2;
	var r3;
	var r4;
	var f0;
	var f1;
	var f2;
	var f3;
	var f4;
	var f5;
	var f6;
	var f7;
	var f8;
	var f9;
	var f10;
	var f11;
	var f12;
	var f13;
	var f14;
	var f15;
	var f16;
	var f17;
	var f18;
var __label__ = 0;
	i7 = sp + 0;var g0 = i7>>2; // save stack
	r0 = heap32[(fp+2)];
	r0 = r0 >> 2;
	f0 = heapFloat[(r0+33)];
	f1 =                         0;
if(!(f0 ==f1)) //_LBB604_8
{
	r1 = heap32[(fp)];
	r2 = heap32[(fp+1)];
	r3 = gNumSplitImpulseRecoveries;
	r3 = r3 >> 2;
	r4 = heap32[(r3)];
	r4 = (r4 + 1)|0;
	r1 = r1 >> 2;
	heap32[(r3)] = r4;
	r2 = r2 >> 2;
	f2 = heapFloat[(r0+4)];
	f3 = heapFloat[(r1+142)];
	f4 = heapFloat[(r0+5)];
	f5 = heapFloat[(r1+143)];
	f6 = heapFloat[(r0)];
	f7 = heapFloat[(r1+146)];
	f8 = heapFloat[(r0+1)];
	f9 = heapFloat[(r1+147)];
	f10 = heapFloat[(r2+142)];
	f11 = heapFloat[(r2+143)];
	f12 = heapFloat[(r0+6)];
	f13 = heapFloat[(r1+144)];
	f3 = f2*f3;
	f5 = f4*f5;
	f6 = f6*f7;
	f7 = f8*f9;
	f8 = heapFloat[(r0+2)];
	f9 = heapFloat[(r1+148)];
	f14 = heapFloat[(r0+8)];
	f15 = heapFloat[(r2+146)];
	f16 = heapFloat[(r0+9)];
	f17 = heapFloat[(r2+147)];
	f18 = heapFloat[(r2+144)];
	f3 = f3+f5;
	f5 = f12*f13;
	f6 = f6+f7;
	f7 = f8*f9;
	f8 = f14*f15;
	f9 = f16*f17;
	f13 = heapFloat[(r0+10)];
	f14 = heapFloat[(r2+148)];
	f10 = f2*f10;
	f11 = f4*f11;
	f15 = heapFloat[(r0+20)];
	f16 = heapFloat[(r0+30)];
	f3 = f3+f5;
	f5 = f6+f7;
	f6 = f8+f9;
	f7 = f13*f14;
	f8 = f10+f11;
	f9 = f12*f18;
	f10 = f15*f16;
	f3 = f3+f5;
	f5 = heapFloat[(r0+23)];
	f6 = f6+f7;
	f7 = f8+f9;
	f6 = f6-f7;
	f0 = f0-f10;
	f3 = f5*f3;
	f0 = f0-f3;
	f3 = f5*f6;
	f0 = f0-f3;
	f3 = heapFloat[(r0+31)];
	f5 = f15+f0;
	if(f3 >f5) //_LBB604_3
{
	f0 = f3-f15;
	f5 = f3;
}
	heapFloat[(r0+20)] = f5;
	f3 = heapFloat[(r1+84)];
if(!(f3 ==f1)) //_LBB604_6
{
	f3 = heapFloat[(r1+138)];
	f2 = f2*f3;
	f2 = f2*f0;
	f3 = heapFloat[(r1+142)];
	f5 = heapFloat[(r1+139)];
	f6 = heapFloat[(r1+140)];
	f2 = f3+f2;
	f3 = f4*f5;
	heapFloat[(r1+142)] = f2;
	f2 = f3*f0;
	f3 = heapFloat[(r1+143)];
	f2 = f3+f2;
	f3 = f12*f6;
	heapFloat[(r1+143)] = f2;
	f2 = f3*f0;
	f3 = heapFloat[(r1+144)];
	f2 = f3+f2;
	heapFloat[(r1+144)] = f2;
	f2 = heapFloat[(r1+134)];
	f2 = f2*f0;
	f3 = heapFloat[(r0+12)];
	f4 = heapFloat[(r1+136)];
	f5 = heapFloat[(r1+135)];
	f2 = f3*f2;
	f3 = heapFloat[(r1+146)];
	f6 = heapFloat[(r0+14)];
	f7 = heapFloat[(r0+13)];
	f2 = f3+f2;
	f3 = f5*f0;
	heapFloat[(r1+146)] = f2;
	f2 = f7*f3;
	f3 = heapFloat[(r1+147)];
	f2 = f3+f2;
	f3 = f4*f0;
	heapFloat[(r1+147)] = f2;
	f2 = f6*f3;
	f3 = heapFloat[(r1+148)];
	f2 = f3+f2;
	heapFloat[(r1+148)] = f2;
}
	f2 = heapFloat[(r2+84)];
if(!(f2 ==f1)) //_LBB604_8
{
	f1 = heapFloat[(r0+4)];
	f2 = heapFloat[(r2+138)];
	f1 = f2*f1;
	f1 = f1*f0;
	f2 = heapFloat[(r2+142)];
	f3 = heapFloat[(r0+5)];
	f4 = heapFloat[(r2+139)];
	f5 = heapFloat[(r0+6)];
	f6 = heapFloat[(r2+140)];
	f1 = f2-f1;
	f2 = f4*f3;
	heapFloat[(r2+142)] = f1;
	f1 = f2*f0;
	f2 = heapFloat[(r2+143)];
	f1 = f2-f1;
	f2 = f6*f5;
	heapFloat[(r2+143)] = f1;
	f1 = f2*f0;
	f2 = heapFloat[(r2+144)];
	f1 = f2-f1;
	heapFloat[(r2+144)] = f1;
	f1 = heapFloat[(r2+134)];
	f1 = f1*f0;
	f2 = heapFloat[(r0+16)];
	f3 = heapFloat[(r2+136)];
	f4 = heapFloat[(r2+135)];
	f1 = f2*f1;
	f2 = heapFloat[(r2+146)];
	f5 = heapFloat[(r0+18)];
	f6 = heapFloat[(r0+17)];
	f1 = f2+f1;
	f2 = f4*f0;
	heapFloat[(r2+146)] = f1;
	f1 = f6*f2;
	f2 = heapFloat[(r2+147)];
	f1 = f2+f1;
	f0 = f3*f0;
	heapFloat[(r2+147)] = f1;
	f0 = f5*f0;
	f1 = heapFloat[(r2+148)];
	f0 = f1+f0;
	heapFloat[(r2+148)] = f0;
}
}
	return;
}