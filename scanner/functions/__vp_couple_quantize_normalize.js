function __vp_couple_quantize_normalize($blobno,$g,$p,$vi,$mdct,$iwork,$nonzero,$sliding_lowpass,$ch) {
 $blobno = $blobno|0;
 $g = $g|0;
 $p = $p|0;
 $vi = $vi|0;
 $mdct = $mdct|0;
 $iwork = $iwork|0;
 $nonzero = $nonzero|0;
 $sliding_lowpass = $sliding_lowpass|0;
 $ch = $ch|0;
 var $$ = 0, $$$i = 0, $$alloca_mul = 0, $$alloca_mul1 = 0, $$alloca_mul11 = 0, $$alloca_mul13 = 0, $$alloca_mul15 = 0, $$alloca_mul3 = 0, $$alloca_mul5 = 0, $$alloca_mul7 = 0, $$alloca_mul9 = 0, $$phi$trans$insert67 = 0, $$pre = 0, $$pre$phi76Z2D = 0, $$pre$phiZ2D = 0, $$pre63 = 0, $$pre64 = 0, $$pre65 = 0, $$pre68 = 0, $$pre69 = 0;
 var $$pre70 = 0, $$pre71 = 0, $$pre72 = 0, $$pre75 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum14 = 0, $$sum5 = 0, $$v = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0.0;
 var $215 = 0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0;
 var $exitcond = 0, $exitcond$i = 0, $exitcond50 = 0, $exitcond54 = 0, $exitcond56 = 0, $exitcond60 = 0, $exitcond61 = 0, $exitcond6189 = 0, $fabsf = 0.0, $fabsf$i = 0.0, $fabsf1 = 0.0, $fabsf2 = 0.0, $fabsf3 = 0.0, $fabsf4 = 0.0, $i$242 = 0, $i$320 = 0, $indvars$iv$next58 = 0, $indvars$iv57 = 0, $ispos = 0, $ispos7 = 0;
 var $ispos9 = 0, $j$01$i = 0, $j$022 = 0, $j$125 = 0, $j$227 = 0, $j$333 = 0, $k$030 = 0, $neg = 0, $neg10 = 0, $neg8 = 0, $not$$i = 0, $p$idx$val = 0, $p$idx13$val = 0, $postpoint$0$in = 0.0, $postpoint$0$in$in = 0, $smax59 = 0, $step$039 = 0, $stereo_threshholds_limited$stereo_threshholds = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 500|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $26 = 16;
 } else {
  $6 = ((($2)) + 508|0);
  $7 = HEAP32[$6>>2]|0;
  $26 = $7;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((((($g)) + 132|0) + (($8*60)|0)|0) + ($blobno<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (((($g)) + 252|0) + ($blobno<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (1624 + ($12<<3)|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (((($g)) + 312|0) + ($blobno<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $ch << 2;
 $$alloca_mul = $17;
 $18 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $$alloca_mul1 = $17;
 $19 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul1)|0)+15)&-16)|0;;
 $$alloca_mul3 = $17;
 $20 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul3)|0)+15)&-16)|0;;
 $$alloca_mul5 = $17;
 $21 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul5)|0)+15)&-16)|0;;
 $$alloca_mul7 = $17;
 $22 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul7)|0)+15)&-16)|0;;
 $23 = ((($vi)) + 1156|0);
 $24 = ($0|0)>(1000);
 $stereo_threshholds_limited$stereo_threshholds = $24 ? 1696 : 1624;
 $postpoint$0$in$in = (($stereo_threshholds_limited$stereo_threshholds) + ($16<<3)|0);
 $postpoint$0$in = +HEAPF64[$postpoint$0$in$in>>3];
 $25 = Math_imul($17, $26)|0;
 $$alloca_mul9 = $25;
 $27 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul9)|0)+15)&-16)|0;;
 HEAP32[$18>>2] = $27;
 $$alloca_mul11 = $25;
 $28 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul11)|0)+15)&-16)|0;;
 HEAP32[$19>>2] = $28;
 $$alloca_mul13 = $25;
 $29 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul13)|0)+15)&-16)|0;;
 HEAP32[$20>>2] = $29;
 $$alloca_mul15 = $25;
 $30 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul15)|0)+15)&-16)|0;;
 HEAP32[$21>>2] = $30;
 $31 = ($ch|0)>(1);
 if ($31) {
  $32 = (($27) + ($26<<2)|0);
  $33 = ((($18)) + 4|0);
  HEAP32[$33>>2] = $32;
  $34 = (($28) + ($26<<2)|0);
  $35 = ((($19)) + 4|0);
  HEAP32[$35>>2] = $34;
  $36 = (($29) + ($26<<2)|0);
  $37 = ((($20)) + 4|0);
  HEAP32[$37>>2] = $36;
  $38 = (($30) + ($26<<2)|0);
  $39 = ((($21)) + 4|0);
  HEAP32[$39>>2] = $38;
  $exitcond6189 = ($ch|0)==(2);
  if (!($exitcond6189)) {
   $43 = 2;
   while(1) {
    $$pre = HEAP32[$18>>2]|0;
    $$pre63 = HEAP32[$19>>2]|0;
    $$pre64 = HEAP32[$20>>2]|0;
    $$pre65 = HEAP32[$21>>2]|0;
    $42 = Math_imul($43, $26)|0;
    $44 = (($$pre) + ($42<<2)|0);
    $45 = (($18) + ($43<<2)|0);
    HEAP32[$45>>2] = $44;
    $46 = (($$pre63) + ($42<<2)|0);
    $47 = (($19) + ($43<<2)|0);
    HEAP32[$47>>2] = $46;
    $48 = (($$pre64) + ($42<<2)|0);
    $49 = (($20) + ($43<<2)|0);
    HEAP32[$49>>2] = $48;
    $50 = (($$pre65) + ($42<<2)|0);
    $51 = (($21) + ($43<<2)|0);
    HEAP32[$51>>2] = $50;
    $52 = (($43) + 1)|0;
    $exitcond61 = ($52|0)==($ch|0);
    if ($exitcond61) {
     break;
    } else {
     $43 = $52;
    }
   }
  }
 }
 $40 = HEAP32[$23>>2]|0;
 $41 = ($0|0)>(0);
 if ($41) {
  $53 = HEAP32[$21>>2]|0;
  $54 = ($ch|0)>(0);
  $55 = $0 ^ -1;
  $56 = $26 ^ -1;
  $i$242 = 0;$indvars$iv57 = $55;
  while(1) {
   $59 = ($indvars$iv57|0)>($56|0);
   $smax59 = $59 ? $indvars$iv57 : $56;
   $60 = $smax59 ^ -1;
   $61 = (($0) - ($i$242))|0;
   $62 = ($26|0)>($61|0);
   $$ = $62 ? $61 : $26;
   _memcpy(($22|0),($nonzero|0),($17|0))|0;
   _memset(($53|0),0,($25|0))|0;
   if ($54) {
    $63 = ($$|0)>(0);
    $64 = (($10) - ($i$242))|0;
    $k$030 = 0;
    while(1) {
     $70 = (($iwork) + ($k$030<<2)|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (($71) + ($i$242<<2)|0);
     $73 = (($22) + ($k$030<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ($74|0)==(0);
     if ($75) {
      if ($63) {
       $78 = (($20) + ($k$030<<2)|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = (($18) + ($k$030<<2)|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = (($19) + ($k$030<<2)|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = (($21) + ($k$030<<2)|0);
       $85 = HEAP32[$84>>2]|0;
       $j$227 = 0;
       while(1) {
        $125 = (($79) + ($j$227<<2)|0);
        HEAPF32[$125>>2] = 1.000000013351432E-10;
        $126 = (($81) + ($j$227<<2)|0);
        HEAPF32[$126>>2] = 0.0;
        $127 = (($83) + ($j$227<<2)|0);
        HEAPF32[$127>>2] = 0.0;
        $128 = (($85) + ($j$227<<2)|0);
        HEAP32[$128>>2] = 0;
        $$sum11 = (($j$227) + ($i$242))|0;
        $129 = (($71) + ($$sum11<<2)|0);
        HEAP32[$129>>2] = 0;
        $130 = (($j$227) + 1)|0;
        $exitcond54 = ($130|0)==($60|0);
        if ($exitcond54) {
         break;
        } else {
         $j$227 = $130;
        }
       }
      }
     } else {
      $76 = (($20) + ($k$030<<2)|0);
      $77 = HEAP32[$76>>2]|0;
      if ($63) {
       $j$022 = 0;
       while(1) {
        $$sum12 = (($j$022) + ($i$242))|0;
        $86 = (($71) + ($$sum12<<2)|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = (1768 + ($87<<2)|0);
        $89 = HEAP32[$88>>2]|0;
        $90 = (($77) + ($j$022<<2)|0);
        HEAP32[$90>>2] = $89;
        $91 = (($j$022) + 1)|0;
        $exitcond = ($91|0)==($60|0);
        if ($exitcond) {
         break;
        } else {
         $j$022 = $91;
        }
       }
       $92 = (($mdct) + ($k$030<<2)|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = (($21) + ($k$030<<2)|0);
       $95 = HEAP32[$94>>2]|0;
       if ($63) {
        $j$01$i = 0;
        while(1) {
         $96 = ($j$01$i|0)>=($64|0);
         $$v = $96 ? $postpoint$0$in : $14;
         $97 = $$v;
         $$sum14 = (($j$01$i) + ($i$242))|0;
         $98 = (($93) + ($$sum14<<2)|0);
         $99 = +HEAPF32[$98>>2];
         $fabsf$i = (+Math_abs((+$99)));
         $100 = (($77) + ($j$01$i<<2)|0);
         $101 = +HEAPF32[$100>>2];
         $102 = $fabsf$i / $101;
         $103 = (($95) + ($j$01$i<<2)|0);
         $not$$i = !($102 < $97);
         $$$i = $not$$i&1;
         HEAP32[$103>>2] = $$$i;
         $104 = (($j$01$i) + 1)|0;
         $exitcond$i = ($104|0)==($$|0);
         if ($exitcond$i) {
          break;
         } else {
          $j$01$i = $104;
         }
        }
        if ($63) {
         $105 = (($18) + ($k$030<<2)|0);
         $106 = HEAP32[$105>>2]|0;
         $107 = (($19) + ($k$030<<2)|0);
         $108 = HEAP32[$107>>2]|0;
         $j$125 = 0;
         while(1) {
          $109 = (($j$125) + ($i$242))|0;
          $110 = (($93) + ($109<<2)|0);
          $111 = +HEAPF32[$110>>2];
          $112 = $111 * $111;
          $113 = (($106) + ($j$125<<2)|0);
          HEAPF32[$113>>2] = $112;
          $114 = (($108) + ($j$125<<2)|0);
          HEAPF32[$114>>2] = $112;
          $115 = +HEAPF32[$110>>2];
          $116 = $115 < 0.0;
          if ($116) {
           $117 = +HEAPF32[$113>>2];
           $118 = -$117;
           HEAPF32[$113>>2] = $118;
          }
          $119 = (($77) + ($j$125<<2)|0);
          $120 = +HEAPF32[$119>>2];
          $121 = $120 * $120;
          HEAPF32[$119>>2] = $121;
          $122 = (($j$125) + 1)|0;
          $exitcond50 = ($122|0)==($60|0);
          if ($exitcond50) {
           $$pre$phi76Z2D = $107;$124 = $106;
           break;
          } else {
           $j$125 = $122;
          }
         }
        } else {
         label = 21;
        }
       } else {
        label = 21;
       }
      } else {
       label = 21;
      }
      if ((label|0) == 21) {
       label = 0;
       $$phi$trans$insert67 = (($18) + ($k$030<<2)|0);
       $$pre68 = HEAP32[$$phi$trans$insert67>>2]|0;
       $$pre75 = (($19) + ($k$030<<2)|0);
       $$pre$phi76Z2D = $$pre75;$124 = $$pre68;
      }
      $123 = HEAP32[$$pre$phi76Z2D>>2]|0;
      $p$idx$val = HEAP32[$1>>2]|0;
      (+_noise_normalize($p$idx$val,$10,$124,$123,$77,0,$i$242,$$,$72));
     }
     $131 = (($k$030) + 1)|0;
     $exitcond56 = ($131|0)==($ch|0);
     if ($exitcond56) {
      break;
     } else {
      $k$030 = $131;
     }
    }
   }
   $65 = HEAP32[$23>>2]|0;
   $66 = ($65|0)>(0);
   if ($66) {
    $67 = ($$|0)>(0);
    $68 = (($sliding_lowpass) - ($i$242))|0;
    $69 = (($10) - ($i$242))|0;
    $249 = $65;$step$039 = 0;
    while(1) {
     $132 = (((($vi)) + 1160|0) + ($step$039<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = (((($vi)) + 2184|0) + ($step$039<<2)|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($iwork) + ($133<<2)|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = (($137) + ($i$242<<2)|0);
     $139 = (($iwork) + ($135<<2)|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($18) + ($133<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = (($18) + ($135<<2)|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = (($19) + ($133<<2)|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (($19) + ($135<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (($20) + ($133<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (($20) + ($135<<2)|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (($21) + ($133<<2)|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($21) + ($135<<2)|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = (($22) + ($133<<2)|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==(0);
     $160 = (($22) + ($135<<2)|0);
     if ($159) {
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161|0)==(0);
      if ($162) {
       $229 = $249;
      } else {
       label = 31;
      }
     } else {
      label = 31;
     }
     if ((label|0) == 31) {
      label = 0;
      HEAP32[$160>>2] = 1;
      HEAP32[$157>>2] = 1;
      if ($67) {
       $j$333 = 0;
       while(1) {
        $163 = ($j$333|0)<($68|0);
        do {
         if ($163) {
          $164 = (($154) + ($j$333<<2)|0);
          $165 = HEAP32[$164>>2]|0;
          $166 = ($165|0)==(0);
          $167 = (($156) + ($j$333<<2)|0);
          if ($166) {
           $168 = HEAP32[$167>>2]|0;
           $169 = ($168|0)==(0);
           if ($169) {
            $203 = ($j$333|0)<($69|0);
            do {
             if ($203) {
              $204 = (($144) + ($j$333<<2)|0);
              $205 = +HEAPF32[$204>>2];
              $206 = (($142) + ($j$333<<2)|0);
              $207 = +HEAPF32[$206>>2];
              $208 = $207 + $205;
              HEAPF32[$206>>2] = $208;
              $fabsf2 = (+Math_abs((+$208)));
              $209 = (($146) + ($j$333<<2)|0);
              HEAPF32[$209>>2] = $fabsf2;
              $$pre$phiZ2D = $204;
             } else {
              $210 = (($142) + ($j$333<<2)|0);
              $211 = +HEAPF32[$210>>2];
              $212 = (($144) + ($j$333<<2)|0);
              $213 = +HEAPF32[$212>>2];
              $214 = $213 + $211;
              $215 = $214 < 0.0;
              $fabsf = (+Math_abs((+$211)));
              $fabsf1 = (+Math_abs((+$213)));
              $216 = $fabsf1 + $fabsf;
              $217 = (($146) + ($j$333<<2)|0);
              HEAPF32[$217>>2] = $216;
              if ($215) {
               $218 = -$216;
               HEAPF32[$210>>2] = $218;
               $$pre$phiZ2D = $212;
               break;
              } else {
               HEAPF32[$210>>2] = $216;
               $$pre$phiZ2D = $212;
               break;
              }
             }
            } while(0);
            $219 = (($148) + ($j$333<<2)|0);
            HEAPF32[$219>>2] = 0.0;
            HEAPF32[$$pre$phiZ2D>>2] = 0.0;
            HEAP32[$167>>2] = 1;
            $$sum = (($j$333) + ($i$242))|0;
            $220 = (($140) + ($$sum<<2)|0);
            HEAP32[$220>>2] = 0;
            break;
           }
          }
          $170 = (($142) + ($j$333<<2)|0);
          $171 = +HEAPF32[$170>>2];
          $fabsf3 = (+Math_abs((+$171)));
          $172 = (($144) + ($j$333<<2)|0);
          $173 = +HEAPF32[$172>>2];
          $fabsf4 = (+Math_abs((+$173)));
          $174 = $fabsf4 + $fabsf3;
          HEAPF32[$170>>2] = $174;
          $175 = (($146) + ($j$333<<2)|0);
          $176 = +HEAPF32[$175>>2];
          $177 = (($148) + ($j$333<<2)|0);
          $178 = +HEAPF32[$177>>2];
          $179 = $178 + $176;
          HEAPF32[$175>>2] = $179;
          HEAP32[$167>>2] = 1;
          HEAP32[$164>>2] = 1;
          $$sum5 = (($j$333) + ($i$242))|0;
          $180 = (($137) + ($$sum5<<2)|0);
          $181 = HEAP32[$180>>2]|0;
          $182 = (($140) + ($$sum5<<2)|0);
          $183 = HEAP32[$182>>2]|0;
          $ispos = ($181|0)>(-1);
          $neg = (0 - ($181))|0;
          $184 = $ispos ? $181 : $neg;
          $ispos7 = ($183|0)>(-1);
          $neg8 = (0 - ($183))|0;
          $185 = $ispos7 ? $183 : $neg8;
          $186 = ($184|0)>($185|0);
          if ($186) {
           $187 = ($181|0)>(0);
           $188 = (($181) - ($183))|0;
           $189 = (($183) - ($181))|0;
           $190 = $187 ? $188 : $189;
           HEAP32[$182>>2] = $190;
           $$pre70 = HEAP32[$180>>2]|0;
           $195 = $$pre70;$198 = $190;
          } else {
           $191 = ($183|0)>(0);
           $192 = (($181) - ($183))|0;
           $193 = (($183) - ($181))|0;
           $194 = $191 ? $192 : $193;
           HEAP32[$182>>2] = $194;
           HEAP32[$180>>2] = $183;
           $$pre69 = HEAP32[$182>>2]|0;
           $195 = $183;$198 = $$pre69;
          }
          $ispos9 = ($195|0)>(-1);
          $neg10 = (0 - ($195))|0;
          $196 = $ispos9 ? $195 : $neg10;
          $197 = $196 << 1;
          $199 = ($198|0)<($197|0);
          if (!($199)) {
           $200 = (0 - ($198))|0;
           HEAP32[$182>>2] = $200;
           $201 = HEAP32[$180>>2]|0;
           $202 = (0 - ($201))|0;
           HEAP32[$180>>2] = $202;
          }
         }
        } while(0);
        $221 = (($150) + ($j$333<<2)|0);
        $222 = +HEAPF32[$221>>2];
        $223 = (($152) + ($j$333<<2)|0);
        $224 = +HEAPF32[$223>>2];
        $225 = $224 + $222;
        HEAPF32[$223>>2] = $225;
        HEAPF32[$221>>2] = $225;
        $226 = (($j$333) + 1)|0;
        $exitcond60 = ($226|0)==($60|0);
        if ($exitcond60) {
         break;
        } else {
         $j$333 = $226;
        }
       }
      }
      $p$idx13$val = HEAP32[$1>>2]|0;
      (+_noise_normalize($p$idx13$val,$10,$142,$146,$150,$154,$i$242,$$,$138));
      $$pre71 = HEAP32[$23>>2]|0;
      $229 = $$pre71;
     }
     $227 = (($step$039) + 1)|0;
     $228 = ($227|0)<($229|0);
     if ($228) {
      $249 = $229;$step$039 = $227;
     } else {
      $248 = $229;
      break;
     }
    }
   } else {
    $248 = $65;
   }
   $230 = (($i$242) + ($26))|0;
   $231 = ($0|0)>($230|0);
   $indvars$iv$next58 = (($indvars$iv57) + ($26))|0;
   if ($231) {
    $i$242 = $230;$indvars$iv57 = $indvars$iv$next58;
   } else {
    $57 = $248;
    break;
   }
  }
 } else {
  $57 = $40;
 }
 $58 = ($57|0)>(0);
 if ($58) {
  $247 = $57;$i$320 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $232 = (((($vi)) + 1160|0) + ($i$320<<2)|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = (($nonzero) + ($233<<2)|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = ($235|0)==(0);
  $237 = (((($vi)) + 2184|0) + ($i$320<<2)|0);
  if ($236) {
   $238 = HEAP32[$237>>2]|0;
   $239 = (($nonzero) + ($238<<2)|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = ($240|0)==(0);
   if ($241) {
    $246 = $247;
   } else {
    label = 52;
   }
  } else {
   label = 52;
  }
  if ((label|0) == 52) {
   label = 0;
   HEAP32[$234>>2] = 1;
   $242 = HEAP32[$237>>2]|0;
   $243 = (($nonzero) + ($242<<2)|0);
   HEAP32[$243>>2] = 1;
   $$pre72 = HEAP32[$23>>2]|0;
   $246 = $$pre72;
  }
  $244 = (($i$320) + 1)|0;
  $245 = ($244|0)<($246|0);
  if ($245) {
   $247 = $246;$i$320 = $244;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}