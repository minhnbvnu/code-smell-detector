function _ZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEf(sp)
{
	var i7;
	var fp = sp>>2;
	var r0;
	var r1;
	var r2;
	var r3;
	var r4;
	var r5;
	var r6;
	var r7;
	var r8;
	var r9;
	var r10;
	var r11;
	var r12;
	var r13;
	var r14;
	var r15;
	var f0;
	var f1;
	var f2;
	var f3;
	var f4;
	var f5;
	var f6;
	var f7;
	var f8;
	var f9;
	var f10;
	var f11;
	var f12;
	var f13;
	var f14;
	var f15;
	var f16;
	var f17;
	var f18;
	var f19;
	var f20;
	var f21;
	var f22;
	var f23;
	var f24;
	var f25;
	var f26;
	var f27;
	var f28;
	var f29;
	var f30;
var __label__ = 0;
	i7 = sp + -1472;var g0 = i7>>2; // save stack
	r0 = heap32[(fp+4)];
	r1 = r0 >> 2;
	r2 = heap32[(r1+1)];
	r3 = heap32[(fp)];
	r4 = heap32[(fp+1)];
	r5 = heap32[(fp+2)];
	r6 = heap32[(fp+3)];
	r7 = heap32[(fp+5)];
	r8 = heap32[(fp+6)];
	f0 = heapFloat[(fp+7)];
_1: do {
	if(r2 >19) //_LBB247_6
{
	r9 = (r2 + -21)|0;
	if(uint(r9) >uint(8)) //_LBB247_30
{
	if(r2 !=31) //_LBB247_5
{
break _1;
}
else{
	r0 = _2E_str1493;
	heap32[(g0)] = r0;
	_ZN15CProfileManager13Start_ProfileEPKc(i7);
	r0 = heap32[(r1+4)];
if(!(r0 <1)) //_LBB247_34
{
	r0 = 0;
_8: while(true){
	r2 = (r0 * 20)|0;
	r9 = heap32[(r1+6)];
	r2 = r2 << 2;
	r2 = (r9 + r2)|0;
	r2 = r2 >> 2;
	r9 = r7 >> 2;
	f1 = heapFloat[(r2)];
	f2 = heapFloat[(r9)];
	f3 = heapFloat[(r2+4)];
	f4 = heapFloat[(r9+1)];
	f5 = heapFloat[(r2+1)];
	f6 = heapFloat[(r2+5)];
	f7 = f1*f2;
	f8 = f3*f4;
	f9 = heapFloat[(r2+8)];
	f10 = heapFloat[(r9+2)];
	f11 = heapFloat[(r9+8)];
	f12 = heapFloat[(r2+2)];
	f13 = heapFloat[(r9+4)];
	f14 = heapFloat[(r2+12)];
	f15 = heapFloat[(r9+9)];
	f16 = heapFloat[(r2+6)];
	f17 = heapFloat[(r9+5)];
	f18 = heapFloat[(r2+13)];
	f19 = heapFloat[(r2+9)];
	f20 = heapFloat[(r9+10)];
	f21 = heapFloat[(r2+10)];
	f22 = heapFloat[(r9+6)];
	f23 = heapFloat[(r2+14)];
	f24 = f5*f2;
	f25 = f6*f4;
	f7 = f7+f8;
	f8 = f9*f10;
	r2 = heap32[(r2+16)];
	f26 = heapFloat[(r9+14)];
	f27 = heapFloat[(r9+13)];
	f28 = heapFloat[(r9+12)];
	r9 = sp + -1408;
	f29 = f12*f2;
	f30 = f16*f4;
	f24 = f24+f25;
	f25 = f19*f10;
	f7 = f7+f8;
	r10 = r9 >> 2;
	f8 = f29+f30;
	f29 = f21*f10;
	f24 = f24+f25;
	heapFloat[(fp+-352)] = f7;
	f7 = f1*f13;
	f25 = f3*f17;
	f8 = f8+f29;
	heapFloat[(r10+1)] = f24;
	heapFloat[(r10+2)] = f8;
	f8 = f5*f13;
	f24 = f6*f17;
	f7 = f7+f25;
	f25 = f9*f22;
	f29 = f12*f13;
	f30 = f16*f17;
	f8 = f8+f24;
	f24 = f19*f22;
	f7 = f7+f25;
	heap32[(r10+3)] = 0;
	f25 = f29+f30;
	f29 = f21*f22;
	f8 = f8+f24;
	heapFloat[(r10+4)] = f7;
	f1 = f1*f11;
	f3 = f3*f15;
	f7 = f25+f29;
	heapFloat[(r10+5)] = f8;
	heapFloat[(r10+6)] = f7;
	f5 = f5*f11;
	f6 = f6*f15;
	f1 = f1+f3;
	f3 = f9*f20;
	f7 = f12*f11;
	f8 = f16*f15;
	f5 = f5+f6;
	f6 = f19*f20;
	f1 = f1+f3;
	heap32[(r10+7)] = 0;
	f2 = f2*f14;
	f3 = f4*f18;
	f4 = f7+f8;
	f7 = f21*f20;
	f5 = f5+f6;
	heapFloat[(r10+8)] = f1;
	f1 = f13*f14;
	f6 = f17*f18;
	f2 = f2+f3;
	f3 = f10*f23;
	f4 = f4+f7;
	heapFloat[(r10+9)] = f5;
	f2 = f2+f3;
	heapFloat[(r10+10)] = f4;
	f3 = f11*f14;
	f4 = f15*f18;
	f1 = f1+f6;
	f5 = f22*f23;
	f1 = f1+f5;
	f3 = f3+f4;
	f4 = f20*f23;
	f2 = f2+f28;
	heap32[(r10+11)] = 0;
	f3 = f3+f4;
	f1 = f1+f27;
	heapFloat[(r10+12)] = f2;
	f2 = f3+f26;
	heapFloat[(r10+13)] = f1;
	heapFloat[(r10+14)] = f2;
	r11 = r6 >> 2;
	heap32[(r10+15)] = 0;
	r10 = heap32[(r11+48)];
	r12 = 1;
	heap32[(r11+48)] = r2;
	r13 = _ZTVZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfE14LocalInfoAdder;
	r14 = -1;
	heap16[(sp+-1424)>>1] = r12;
	r12 = sp + -1432;
	heap16[(sp+-1422)>>1] = r14;
	r13 = (r13 + 8)|0;
	r14 = r12 >> 2;
	heap32[(fp+-358)] = r13;
	heap32[(r14+3)] = r8;
	r15 = r8 >> 2;
	heap32[(r14+4)] = r0;
	heap32[(r14+1)] = heap32[(r15+1)];
	heap32[(g0)] = r3;
	heap32[(g0+1)] = r4;
	heap32[(g0+2)] = r5;
	heap32[(g0+3)] = r6;
	heap32[(g0+4)] = r2;
	heap32[(g0+5)] = r9;
	heap32[(g0+6)] = r12;
	heapFloat[(g0+7)] = f0;
	_ZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEf(i7);
	r0 = (r0 + 1)|0;
	heap32[(r11+48)] = r10;
	heap32[(fp+-358)] = r13;
	r2 = heap32[(r1+4)];
if(!(r2 >r0)) //_LBB247_33
{
break _8;
}
}
}
	r0 = _ZN15CProfileManager11CurrentNodeE;
	r0 = r0 >> 2;
	r1 = heap32[(r0)];
	r2 = r1 >> 2;
	r3 = heap32[(r2+4)];
	r3 = (r3 + -1)|0;
	heap32[(r2+4)] = r3;
	if(r3 !=0) //_LBB247_5
{
break _1;
}
else{
	r3 = heap32[(r2+1)];
	if(r3 !=0) //_LBB247_37
{
	r1 = sp + -24;
	heap32[(g0)] = r1;
	heap32[(g0+1)] = 0;
	r3 = _ZL13gProfileClock_2E_0;
	gettimeofday(i7);
	r3 = r3 >> 2;
	r3 = heap32[(r3)];
	r3 = r3 >> 2;
	r1 = r1 >> 2;
	r4 = heap32[(fp+-6)];
	r5 = heap32[(r3)];
	r4 = (r4 - r5)|0;
	r1 = heap32[(r1+1)];
	r3 = heap32[(r3+1)];
	r1 = (r1 - r3)|0;
	r3 = (r4 * 1000000)|0;
	r1 = (r1 + r3)|0;
	r3 = heap32[(r2+3)];
	r1 = (r1 - r3)|0;
	f0 = uint(r1); //fuitos r1, f0
	f1 =                      1000;
	f2 = heapFloat[(r2+2)];
	f0 = f0/f1;
	f0 = f2+f0;
	heapFloat[(r2+2)] = f0;
	r1 = heap32[(r2+4)];
	if(r1 !=0) //_LBB247_5
{
break _1;
}
else{
	r1 = heap32[(r0)];
}
}
	r1 = r1 >> 2;
	r1 = heap32[(r1+5)];
	heap32[(r0)] = r1;
	return;
}
}
}
else{
	if(r2 !=21) //_LBB247_11
{
	r2 = r5 >> 2;
	r9 = r7 >> 2;
	f0 = heapFloat[(r9)];
	f1 = heapFloat[(r2)];
	f2 = heapFloat[(r9+4)];
	f3 = heapFloat[(r2+4)];
	r10 = r4 >> 2;
	f4 = heapFloat[(r2+1)];
	f5 = heapFloat[(r2+5)];
	f6 = f1*f0;
	f7 = f3*f2;
	f8 = heapFloat[(r9+8)];
	f9 = heapFloat[(r2+8)];
	f10 = heapFloat[(r9+2)];
	f11 = heapFloat[(r2+2)];
	f12 = heapFloat[(r9+1)];
	f13 = heapFloat[(r2+12)];
	f14 = heapFloat[(r10+12)];
	f15 = heapFloat[(r9+6)];
	f16 = heapFloat[(r2+6)];
	f17 = heapFloat[(r9+5)];
	f18 = heapFloat[(r2+13)];
	f19 = heapFloat[(r10+13)];
	f20 = heapFloat[(r9+13)];
	f21 = heapFloat[(r2+10)];
	f22 = heapFloat[(r9+10)];
	f23 = heapFloat[(r2+9)];
	f24 = heapFloat[(r9+9)];
	f25 = heapFloat[(r2+14)];
	heapFloat[(fp+-360)] = f25;
	f26 = heapFloat[(r10+14)];
	f27 = heapFloat[(r9+14)];
	f28 = heapFloat[(r9+12)];
	heapFloat[(fp+-359)] = f28;
	f29 = f4*f0;
	f30 = f5*f2;
	f6 = f6+f7;
	f7 = f9*f8;
	r2 = sp + -1056;
	f25 = f11*f0;
	f28 = f16*f2;
	f29 = f29+f30;
	f30 = f23*f8;
	f6 = f6+f7;
	r9 = r2 >> 2;
	f7 = f25+f28;
	f25 = f21*f8;
	f28 = f29+f30;
	heapFloat[(fp+-264)] = f6;
	f6 = f1*f12;
	f29 = f3*f17;
	f7 = f7+f25;
	heapFloat[(r9+1)] = f28;
	heapFloat[(r9+2)] = f7;
	f7 = f4*f12;
	f25 = f5*f17;
	f6 = f6+f29;
	f28 = f9*f24;
	f29 = f11*f12;
	f30 = f16*f17;
	f7 = f7+f25;
	f25 = f23*f24;
	f6 = f6+f28;
	heap32[(r9+3)] = 0;
	f28 = f29+f30;
	f29 = f21*f24;
	f7 = f7+f25;
	heapFloat[(r9+4)] = f6;
	f1 = f1*f10;
	f3 = f3*f15;
	f6 = f28+f29;
	heapFloat[(r9+5)] = f7;
	heapFloat[(r9+6)] = f6;
	f4 = f4*f10;
	f5 = f5*f15;
	f1 = f1+f3;
	f3 = f9*f22;
	f6 = f11*f10;
	f7 = f16*f15;
	f4 = f4+f5;
	f5 = f23*f22;
	f1 = f1+f3;
	heap32[(r9+7)] = 0;
	f3 = f6+f7;
	f6 = f21*f22;
	f4 = f4+f5;
	heapFloat[(r9+8)] = f1;
	f1 = f3+f6;
	heapFloat[(r9+9)] = f4;
	heapFloat[(r9+10)] = f1;
	heap32[(r9+11)] = 0;
	heap32[(r9+12)] = 0;
	heap32[(r9+13)] = 0;
	heap32[(r9+14)] = 0;
	heap32[(r9+15)] = 0;
	r9 = heap32[(r1)];
	r9 = r9 >> 2;
	r9 = heap32[(r9+11)];
	heap32[(g0)] = r0;
	__FUNCTION_TABLE__[(r9)>>2](i7);
	r9 = sp + -1280;
	heap32[(g0)] = r9;
	heap32[(g0+1)] = r3;
	heap32[(g0+2)] = r4;
	heap32[(g0+3)] = r5;
	heap32[(g0+4)] = r7;
	heapFloat[(g0+5)] = f_g0;
	r4 = _ZTVZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfE32BridgeTriangleConvexcastCallback_0;
	_ZN28btTriangleConvexcastCallbackC2EPK13btConvexShapeRK11btTransformS5_S5_f(i7);
	r4 = (r4 + 8)|0;
	r5 = r9 >> 2;
	heap32[(fp+-320)] = r4;
	heap32[(r5+52)] = r8;
	heap32[(r5+53)] = r6;
	r4 = r8 >> 2;
	heap32[(r5+54)] = r0;
	r6 = r3 >> 2;
	heap32[(r5+50)] = heap32[(r4+1)];
	r4 = heap32[(r6)];
	r4 = r4 >> 2;
	r4 = heap32[(r4+2)];
	f28 = heapFloat[(fp+-359)];
	f1 = -f28;
	r5 = sp + -1296;
	r6 = sp + -1312;
	f3 = f0*f14;
	f4 = f2*f19;
	f5 = f0*f1;
	f6 = f2*f20;
	f3 = f3+f4;
	f4 = f8*f26;
	f5 = f5-f6;
	f6 = f8*f27;
	heap32[(g0)] = r3;
	heap32[(g0+1)] = r2;
	heap32[(g0+2)] = r5;
	heap32[(g0+3)] = r6;
	f7 = f12*f14;
	f9 = f17*f19;
	f11 = f12*f1;
	f16 = f17*f20;
	f3 = f3+f4;
	f4 = f5-f6;
	f5 = f10*f14;
	f6 = f15*f19;
	f1 = f10*f1;
	f14 = f15*f20;
	f7 = f7+f9;
	f9 = f24*f26;
	f11 = f11-f16;
	f16 = f24*f27;
	f3 = f3+f4;
	__FUNCTION_TABLE__[(r4)>>2](i7);
	r2 = sp + -1328;
	f0 = f0*f13;
	f2 = f2*f18;
	f10 = f10*f13;
	f15 = f15*f18;
	f12 = f12*f13;
	f13 = f17*f18;
	f5 = f5+f6;
	f6 = f22*f26;
	f1 = f1-f14;
	f14 = f22*f27;
	f7 = f7+f9;
	f9 = f11-f16;
	f7 = f7+f9;
	f0 = f0+f2;
	f25 = heapFloat[(fp+-360)];
	f2 = f8*f25;
	f8 = f10+f15;
	f10 = f22*f25;
	f11 = f12+f13;
	f12 = f24*f25;
	r3 = r2 >> 2;
	heapFloat[(fp+-332)] = f3;
	f5 = f5+f6;
	f1 = f1-f14;
	f0 = f0+f2;
	f2 = f8+f10;
	f6 = f11+f12;
	f5 = f5+f1;
	heapFloat[(r3+1)] = f7;
	f0 = f0+f4;
	f1 = f2+f1;
	f2 = f6+f9;
	heapFloat[(r3+2)] = f5;
	heap32[(r3+3)] = 0;
	if(f0 <f3) //_LBB247_13
{
	heapFloat[(fp+-332)] = f0;
	f4 = f0;
}
else{
	f4 = f3;
}
	if(f2 <f7) //_LBB247_16
{
	heapFloat[(r3+1)] = f2;
	f6 = f2;
}
else{
	f6 = f7;
}
	if(f1 <f5) //_LBB247_19
{
	heapFloat[(r3+2)] = f1;
	f8 = f1;
}
else{
	f8 = f5;
}
	r4 = sp + -1344;
	r7 = r4 >> 2;
	heapFloat[(fp+-336)] = f3;
	heapFloat[(r7+1)] = f7;
	heapFloat[(r7+2)] = f5;
	heap32[(r7+3)] = 0;
	if(f3 <f0) //_LBB247_22
{
	heapFloat[(fp+-336)] = f0;
	f3 = f0;
}
	if(f7 <f2) //_LBB247_25
{
	heapFloat[(r7+1)] = f2;
	f7 = f2;
}
	if(f5 <f1) //_LBB247_28
{
	heapFloat[(r7+2)] = f1;
	f5 = f1;
}
	f0 = heapFloat[(fp+-324)];
	f0 = f4+f0;
	r5 = r5 >> 2;
	heapFloat[(fp+-332)] = f0;
	f0 = heapFloat[(r5+1)];
	f0 = f6+f0;
	heapFloat[(r3+1)] = f0;
	f0 = heapFloat[(r5+2)];
	f0 = f8+f0;
	heapFloat[(r3+2)] = f0;
	f0 = heapFloat[(fp+-328)];
	f0 = f3+f0;
	r3 = r6 >> 2;
	heapFloat[(fp+-336)] = f0;
	f0 = heapFloat[(r3+1)];
	f0 = f7+f0;
	heapFloat[(r7+1)] = f0;
	f0 = heapFloat[(r3+2)];
	f0 = f5+f0;
	heapFloat[(r7+2)] = f0;
	r1 = heap32[(r1)];
	r1 = r1 >> 2;
	r1 = heap32[(r1+15)];
	heap32[(g0)] = r0;
	heap32[(g0+1)] = r9;
	heap32[(g0+2)] = r2;
	heap32[(g0+3)] = r4;
	__FUNCTION_TABLE__[(r1)>>2](i7);
	return;
}
else{
	r2 = r7 >> 2;
	r9 = r4 >> 2;
	f0 = heapFloat[(r2+12)];
	f0 = -f0;
	f1 = heapFloat[(r2)];
	f2 = heapFloat[(r9+12)];
	f3 = heapFloat[(r2+4)];
	f4 = heapFloat[(r2+13)];
	f5 = heapFloat[(r9+13)];
	f6 = heapFloat[(r2+1)];
	f7 = heapFloat[(r2+5)];
	f8 = f1*f2;
	f9 = f3*f5;
	f10 = f1*f0;
	f11 = f3*f4;
	f12 = heapFloat[(r2+8)];
	f13 = heapFloat[(r2+14)];
	f14 = heapFloat[(r9+14)];
	f15 = heapFloat[(r2+9)];
	f16 = heapFloat[(r2+2)];
	f17 = heapFloat[(r2+6)];
	f18 = f6*f2;
	f19 = f7*f5;
	f20 = f6*f0;
	f21 = f7*f4;
	f8 = f8+f9;
	f9 = f12*f14;
	f10 = f10-f11;
	f11 = f12*f13;
	f22 = heapFloat[(r2+10)];
	f2 = f16*f2;
	f5 = f17*f5;
	f0 = f16*f0;
	f4 = f17*f4;
	f18 = f18+f19;
	f19 = f15*f14;
	f20 = f20-f21;
	f21 = f15*f13;
	f8 = f8+f9;
	f9 = f10-f11;
	r2 = sp + -656;
	f2 = f2+f5;
	f5 = f22*f14;
	f0 = f0-f4;
	f4 = f22*f13;
	f10 = f18+f19;
	f11 = f20-f21;
	f8 = f8+f9;
	r9 = r2 >> 2;
	f2 = f2+f5;
	f0 = f0-f4;
	f4 = f10+f11;
	heapFloat[(fp+-164)] = f8;
	f2 = f2+f0;
	heapFloat[(r9+1)] = f4;
	heapFloat[(r9+2)] = f2;
	r10 = r5 >> 2;
	heap32[(r9+3)] = 0;
	f2 = heapFloat[(r10+12)];
	f4 = heapFloat[(r10+13)];
	f5 = heapFloat[(r10+14)];
	f8 = f1*f2;
	f10 = f3*f4;
	f13 = f6*f2;
	f14 = f7*f4;
	f8 = f8+f10;
	f10 = f12*f5;
	f8 = f8+f10;
	f2 = f16*f2;
	f4 = f17*f4;
	f10 = f13+f14;
	f13 = f15*f5;
	r9 = sp + -672;
	f10 = f10+f13;
	f2 = f2+f4;
	f4 = f22*f5;
	f5 = f8+f9;
	f2 = f2+f4;
	r11 = r9 >> 2;
	f4 = f10+f11;
	heapFloat[(fp+-168)] = f5;
	f0 = f2+f0;
	heapFloat[(r11+1)] = f4;
	heapFloat[(r11+2)] = f0;
	heap32[(r11+3)] = 0;
	f0 = heapFloat[(r10)];
	f2 = heapFloat[(r10+4)];
	f4 = heapFloat[(r10+1)];
	f5 = heapFloat[(r10+5)];
	f8 = heapFloat[(r10+8)];
	f9 = f0*f1;
	f10 = f2*f3;
	f11 = heapFloat[(r10+2)];
	f13 = heapFloat[(r10+6)];
	f14 = heapFloat[(r10+10)];
	f18 = heapFloat[(r10+9)];
	f19 = f4*f1;
	f20 = f5*f3;
	f9 = f9+f10;
	f10 = f8*f12;
	r10 = sp + -736;
	f1 = f11*f1;
	f3 = f13*f3;
	f19 = f19+f20;
	f20 = f18*f12;
	f9 = f9+f10;
	r11 = r10 >> 2;
	f1 = f1+f3;
	f3 = f14*f12;
	f10 = f19+f20;
	heapFloat[(fp+-184)] = f9;
	f9 = f0*f6;
	f12 = f2*f7;
	f1 = f1+f3;
	heapFloat[(r11+1)] = f10;
	heapFloat[(r11+2)] = f1;
	f1 = f4*f6;
	f3 = f5*f7;
	f9 = f9+f12;
	f10 = f8*f15;
	f6 = f11*f6;
	f7 = f13*f7;
	f1 = f1+f3;
	f3 = f18*f15;
	f9 = f9+f10;
	heap32[(r11+3)] = 0;
	f6 = f6+f7;
	f7 = f14*f15;
	f1 = f1+f3;
	heapFloat[(r11+4)] = f9;
	f0 = f0*f16;
	f2 = f2*f17;
	f3 = f6+f7;
	heapFloat[(r11+5)] = f1;
	heapFloat[(r11+6)] = f3;
	f1 = f4*f16;
	f3 = f5*f17;
	f0 = f0+f2;
	f2 = f8*f22;
	f4 = f11*f16;
	f5 = f13*f17;
	f1 = f1+f3;
	f3 = f18*f22;
	f0 = f0+f2;
	heap32[(r11+7)] = 0;
	f2 = f4+f5;
	f4 = f14*f22;
	f1 = f1+f3;
	heapFloat[(r11+8)] = f0;
	f0 = f2+f4;
	heapFloat[(r11+9)] = f1;
	heapFloat[(r11+10)] = f0;
	heap32[(r11+11)] = 0;
	heap32[(r11+12)] = 0;
	heap32[(r11+13)] = 0;
	heap32[(r11+14)] = 0;
	heap32[(r11+15)] = 0;
	r11 = heap32[(r1)];
	r11 = r11 >> 2;
	r11 = heap32[(r11+11)];
	heap32[(g0)] = r0;
	__FUNCTION_TABLE__[(r11)>>2](i7);
	r11 = sp + -960;
	heap32[(g0)] = r11;
	heap32[(g0+1)] = r3;
	heap32[(g0+2)] = r4;
	heap32[(g0+3)] = r5;
	heap32[(g0+4)] = r7;
	heapFloat[(g0+5)] = f_g0;
	r4 = _ZTVZN16btCollisionWorld17objectQuerySingleEPK13btConvexShapeRK11btTransformS5_P17btCollisionObjectPK16btCollisionShapeS5_RNS_20ConvexResultCallbackEfE32BridgeTriangleConvexcastCallback;
	_ZN28btTriangleConvexcastCallbackC2EPK13btConvexShapeRK11btTransformS5_S5_f(i7);
	r4 = (r4 + 8)|0;
	r5 = r11 >> 2;
	heap32[(fp+-240)] = r4;
	heap32[(r5+52)] = r8;
	heap32[(r5+53)] = r6;
	r4 = r8 >> 2;
	heap32[(r5+54)] = r0;
	r0 = r3 >> 2;
	heap32[(r5+50)] = heap32[(r4+1)];
	r0 = heap32[(r0)];
	r0 = r0 >> 2;
	r0 = heap32[(r0+2)];
	r4 = sp + -976;
	r5 = sp + -992;
	heap32[(g0)] = r3;
	heap32[(g0+1)] = r10;
	heap32[(g0+2)] = r4;
	heap32[(g0+3)] = r5;
	__FUNCTION_TABLE__[(r0)>>2](i7);
	r0 = _ZTVZN22btBvhTriangleMeshShape17performConvexcastEP18btTriangleCallbackRK9btVector3S4_S4_S4_E21MyNodeOverlapCallback;
	r3 = sp + -16;
	r6 = heap32[(r1+12)];
	r0 = (r0 + 8)|0;
	r7 = r3 >> 2;
	heap32[(fp+-4)] = r0;
	heap32[(r7+1)] = r6;
	heap32[(r7+2)] = r11;
	r0 = heap32[(r1+13)];
	r1 = heapU8[r0+60];
	if(r1 ==0) //_LBB247_10
{
	heap32[(g0)] = r0;
	heap32[(g0+1)] = r3;
	heap32[(g0+2)] = r2;
	heap32[(g0+3)] = r9;
	heap32[(g0+4)] = r4;
	heap32[(g0+5)] = r5;
	_ZNK14btQuantizedBvh27walkStacklessTreeAgainstRayEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_ii(i7);
	return;
}
else{
	r1 = r0 >> 2;
	r1 = heap32[(r1+14)];
	heap32[(g0)] = r0;
	heap32[(g0+1)] = r3;
	heap32[(g0+2)] = r2;
	heap32[(g0+3)] = r9;
	heap32[(g0+4)] = r4;
	heap32[(g0+5)] = r5;
	heap32[(g0+6)] = r1;
	_ZNK14btQuantizedBvh36walkStacklessQuantizedTreeAgainstRayEP21btNodeOverlapCallbackRK9btVector3S4_S4_S4_ii(i7);
	return;
}
}
}
}
else{
	r1 = _ZTVN12btConvexCast10CastResultE;
	r2 = sp + -200;
	r1 = (r1 + 8)|0;
	r9 = r2 >> 2;
	heap32[(fp+-50)] = r1;
	heap32[(r9+42)] = 0;
	r1 = sp + -560;
	r10 = r8 >> 2;
	heapFloat[(r9+43)] = f0;
	r11 = r1 >> 2;
	heap32[(r9+41)] = heap32[(r10+1)];
	r12 = _ZTV30btGjkEpaPenetrationDepthSolver;
	r13 = 0;
	heap32[(r11+77)] = 953267991;
	r11 = _ZTV27btContinuousConvexCollision;
	r12 = (r12 + 8)|0;
	heap8[sp+-228] = r13;
	r13 = sp + -592;
	r11 = (r11 + 8)|0;
	heap32[(fp+-142)] = r12;
	r12 = r13 >> 2;
	heap32[(fp+-148)] = r11;
	r11 = sp + -568;
	heap32[(r12+1)] = r1;
	heap32[(r12+2)] = r11;
	heap32[(r12+3)] = r3;
	heap32[(r12+4)] = r0;
	heap32[(g0)] = r13;
	heap32[(g0+1)] = r4;
	heap32[(g0+2)] = r5;
	heap32[(g0+3)] = r7;
	heap32[(g0+4)] = r7;
	heap32[(g0+5)] = r2;
	_ZN27btContinuousConvexCollision16calcTimeOfImpactERK11btTransformS2_S2_S2_RN12btConvexCast10CastResultE(i7);
	r0 = r_g0;
if(!(r0 ==0)) //_LBB247_5
{
	f0 = heapFloat[(r9+33)];
	f1 = heapFloat[(r9+34)];
	f2 = heapFloat[(r9+35)];
	f0 = f0*f0;
	f1 = f1*f1;
	f0 = f0+f1;
	f1 = f2*f2;
	f0 = f0+f1;
	f1 =   9.9999997473787516e-005;
if(!(f0 <=f1)) //_LBB247_5
{
	f1 = heapFloat[(r9+41)];
	f2 = heapFloat[(r10+1)];
if(!(f1 >=f2)) //_LBB247_5
{
	heapFloat[(g0)] = f0;
	sqrtf(i7);
	f1 =                         1;
	f2 = heapFloat[(r9+33)];
	f0 = f1/f_g0;
	f1 = f2*f0;
	heapFloat[(r9+33)] = f1;
	f2 = heapFloat[(r9+34)];
	f2 = f2*f0;
	heapFloat[(r9+34)] = f2;
	f3 = heapFloat[(r9+35)];
	f0 = f3*f0;
	heapFloat[(r9+35)] = f0;
	r0 = sp + -640;
	f3 = heapFloat[(r9+41)];
	r1 = r0 >> 2;
	heap32[(fp+-160)] = r6;
	heap32[(r1+1)] = 0;
	heapFloat[(r1+2)] = f1;
	heapFloat[(r1+3)] = f2;
	heapFloat[(r1+4)] = f0;
	heap32[(r1+5)] = heap32[(r9+36)];
	heap32[(r1+6)] = heap32[(r9+37)];
	heap32[(r1+7)] = heap32[(r9+38)];
	heap32[(r1+8)] = heap32[(r9+39)];
	heap32[(r1+9)] = heap32[(r9+40)];
	heapFloat[(r1+10)] = f3;
	r1 = heap32[(r10)];
	r1 = r1 >> 2;
	r1 = heap32[(r1+3)];
	heap32[(g0)] = r8;
	heap32[(g0+1)] = r0;
	heap32[(g0+2)] = 1;
	__FUNCTION_TABLE__[(r1)>>2](i7);
}
}
}
}
} while(0);
	return;
}