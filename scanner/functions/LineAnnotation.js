function LineAnnotation(t){var o;_classCallCheck(this,LineAnnotation);o=r.call(this,t);var l=t.dict;o.data.annotationType=c.AnnotationType.LINE;var u=l.getArray("L");o.data.lineCoordinates=c.Util.normalizeRect(u);o.setLineEndings(l.getArray("LE"));o.data.lineEndings=o.lineEndings;if(!o.appearance){var h=o.color?Array.from(o.color).map((function(t){return t/255})):[0,0,0],d=l.get("CA"),g=null,y=l.getArray("IC");y&&(g=(y=getRgbColor(y,null))?Array.from(y).map((function(t){return t/255})):null);var m=g?d:null,v=o.borderStyle.width||1,w=2*v,_=[o.data.lineCoordinates[0]-w,o.data.lineCoordinates[1]-w,o.data.lineCoordinates[2]+w,o.data.lineCoordinates[3]+w];c.Util.intersect(o.rectangle,_)||(o.rectangle=_);o._setDefaultAppearance({xref:t.xref,extra:"".concat(v," w"),strokeColor:h,fillColor:g,strokeAlpha:d,fillAlpha:m,pointsCallback:function pointsCallback(t,r){t.push("".concat(u[0]," ").concat(u[1]," m"),"".concat(u[2]," ").concat(u[3]," l"),"S");return[r[0].x-v,r[1].x+v,r[3].y-v,r[1].y+v]}})}return o}