function PolylineAnnotation(t){var o;_classCallCheck(this,PolylineAnnotation);o=r.call(this,t);var l=t.dict;o.data.annotationType=c.AnnotationType.POLYLINE;o.data.vertices=[];if(!(_assertThisInitialized(o)instanceof W)){o.setLineEndings(l.getArray("LE"));o.data.lineEndings=o.lineEndings}var u=l.getArray("Vertices");if(!Array.isArray(u))return _possibleConstructorReturn(o);for(var h=0,d=u.length;h<d;h+=2)o.data.vertices.push({x:u[h],y:u[h+1]});if(!o.appearance){var g,y=o.color?Array.from(o.color).map((function(t){return t/255})):[0,0,0],m=l.get("CA"),v=o.borderStyle.width||1,w=2*v,_=[1/0,1/0,-1/0,-1/0],k=_createForOfIteratorHelper(o.data.vertices);try{for(k.s();!(g=k.n()).done;){var S=g.value;_[0]=Math.min(_[0],S.x-w);_[1]=Math.min(_[1],S.y-w);_[2]=Math.max(_[2],S.x+w);_[3]=Math.max(_[3],S.y+w)}}catch(t){k.e(t)}finally{k.f()}c.Util.intersect(o.rectangle,_)||(o.rectangle=_);o._setDefaultAppearance({xref:t.xref,extra:"".concat(v," w"),strokeColor:y,strokeAlpha:m,pointsCallback:function pointsCallback(t,r){for(var c=o.data.vertices,l=0,u=c.length;l<u;l++)t.push("".concat(c[l].x," ").concat(c[l].y," ").concat(0===l?"m":"l"));t.push("S");return[r[0].x,r[1].x,r[3].y,r[1].y]}})}return o}