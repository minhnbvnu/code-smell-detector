function _ZN24btConvexTriangleCallback15processTriangleEP9btVector3ii(sp)
{
	var i7;
	var fp = sp>>2;
	var r0;
	var r1;
	var r2;
	var r3;
	var r4;
	var r5;
	var r6;
	var r7;
	var r8;
	var r9;
	var r10;
	var r11;
	var f0;
	var f1;
	var f2;
	var f3;
	var f4;
	var f5;
	var f6;
	var f7;
	var f8;
	var f9;
	var f10;
var __label__ = 0;
	i7 = sp + -240;var g0 = i7>>2; // save stack
	r0 = heap32[(fp)];
	r0 = r0 >> 2;
	r1 = heap32[(r0+13)];
	r2 = heap32[(fp+1)];
	r3 = heap32[(r0+12)];
	r4 = heap32[(r0+2)];
if(!(r1 ==0)) //_LBB277_4
{
	r1 = r1 >> 2;
	r1 = heap32[(r1+5)];
if(!(r1 ==0)) //_LBB277_4
{
	r5 = r1 >> 2;
	r5 = heap32[(r5)];
	r5 = r5 >> 2;
	r5 = heap32[(r5+12)];
	heap32[(g0)] = r1;
	__FUNCTION_TABLE__[(r5)>>2](i7);
	r1 = r_g0 & 1;
if(!(r1 ==0)) //_LBB277_4
{
	r1 = sp + -112;
	r5 = r1 >> 2;
	heap32[(fp+-28)] = 1065353216;
	heap32[(r5+1)] = 1065353216;
	heap32[(r5+2)] = 0;
	heap32[(r5+3)] = 0;
	r5 = heap32[(r0+13)];
	r5 = r5 >> 2;
	r6 = r4 >> 2;
	r7 = r2 >> 2;
	r8 = heap32[(r5+5)];
	r8 = r8 >> 2;
	f0 = heapFloat[(r7+4)];
	f1 = heapFloat[(r6+1)];
	f2 = heapFloat[(r7+5)];
	f3 = heapFloat[(r6+2)];
	r8 = heap32[(r8)];
	f4 = heapFloat[(r6+5)];
	f5 = heapFloat[(r6+6)];
	f1 = f1*f0;
	f3 = f3*f2;
	f6 = heapFloat[(r7+6)];
	f7 = heapFloat[(r6+3)];
	r8 = r8 >> 2;
	f8 = heapFloat[(r6+9)];
	f9 = heapFloat[(r6+10)];
	f10 = heapFloat[(r6+7)];
	f4 = f4*f0;
	f5 = f5*f2;
	f1 = f1+f3;
	f3 = f7*f6;
	f7 = heapFloat[(r6+11)];
	r8 = heap32[(r8+2)];
	f0 = f8*f0;
	f2 = f9*f2;
	f4 = f4+f5;
	f5 = f10*f6;
	f1 = f1+f3;
	f3 = heapFloat[(r6+13)];
	f8 = heapFloat[(r6+15)];
	f9 = heapFloat[(r6+14)];
	r9 = sp + -96;
	f4 = f4+f5;
	f0 = f0+f2;
	f2 = f7*f6;
	f1 = f1+f3;
	f0 = f0+f2;
	r10 = r9 >> 2;
	f2 = f4+f9;
	heapFloat[(fp+-24)] = f1;
	f0 = f0+f8;
	heapFloat[(r10+1)] = f2;
	heapFloat[(r10+2)] = f0;
	heap32[(r10+3)] = 0;
	f0 = heapFloat[(r7)];
	f1 = heapFloat[(r6+1)];
	f2 = heapFloat[(r7+1)];
	f3 = heapFloat[(r6+2)];
	f4 = heapFloat[(r6+5)];
	f5 = heapFloat[(r6+6)];
	f1 = f1*f0;
	f3 = f3*f2;
	f6 = heapFloat[(r7+2)];
	f7 = heapFloat[(r6+3)];
	f8 = heapFloat[(r6+9)];
	f9 = heapFloat[(r6+10)];
	f10 = heapFloat[(r6+7)];
	f4 = f4*f0;
	f5 = f5*f2;
	f1 = f1+f3;
	f3 = f7*f6;
	f7 = heapFloat[(r6+11)];
	f0 = f8*f0;
	f2 = f9*f2;
	f4 = f4+f5;
	f5 = f10*f6;
	f1 = f1+f3;
	f3 = heapFloat[(r6+13)];
	f8 = heapFloat[(r6+15)];
	f9 = heapFloat[(r6+14)];
	r10 = sp + -80;
	f4 = f4+f5;
	f0 = f0+f2;
	f2 = f7*f6;
	f1 = f1+f3;
	f0 = f0+f2;
	r11 = r10 >> 2;
	f2 = f4+f9;
	heapFloat[(fp+-20)] = f1;
	f0 = f0+f8;
	heapFloat[(r11+1)] = f2;
	heapFloat[(r11+2)] = f0;
	heap32[(r11+3)] = 0;
	r5 = heap32[(r5+5)];
	heap32[(g0)] = r5;
	heap32[(g0+1)] = r10;
	heap32[(g0+2)] = r9;
	heap32[(g0+3)] = r1;
	__FUNCTION_TABLE__[(r8)>>2](i7);
	r5 = heap32[(r0+13)];
	r5 = r5 >> 2;
	r8 = heap32[(r5+5)];
	r8 = r8 >> 2;
	f0 = heapFloat[(r7+8)];
	f1 = heapFloat[(r6+1)];
	f2 = heapFloat[(r7+9)];
	f3 = heapFloat[(r6+2)];
	r8 = heap32[(r8)];
	f4 = heapFloat[(r6+5)];
	f5 = heapFloat[(r6+6)];
	f1 = f1*f0;
	f3 = f3*f2;
	f6 = heapFloat[(r7+10)];
	f7 = heapFloat[(r6+3)];
	r8 = r8 >> 2;
	f8 = heapFloat[(r6+9)];
	f9 = heapFloat[(r6+10)];
	f10 = heapFloat[(r6+7)];
	f4 = f4*f0;
	f5 = f5*f2;
	f1 = f1+f3;
	f3 = f7*f6;
	f7 = heapFloat[(r6+11)];
	r8 = heap32[(r8+2)];
	f0 = f8*f0;
	f2 = f9*f2;
	f4 = f4+f5;
	f5 = f10*f6;
	f1 = f1+f3;
	f3 = heapFloat[(r6+13)];
	f8 = heapFloat[(r6+15)];
	f9 = heapFloat[(r6+14)];
	r9 = sp + -64;
	f4 = f4+f5;
	f0 = f0+f2;
	f2 = f7*f6;
	f1 = f1+f3;
	f0 = f0+f2;
	r10 = r9 >> 2;
	f2 = f4+f9;
	heapFloat[(fp+-16)] = f1;
	f0 = f0+f8;
	heapFloat[(r10+1)] = f2;
	heapFloat[(r10+2)] = f0;
	heap32[(r10+3)] = 0;
	f0 = heapFloat[(r7+4)];
	f1 = heapFloat[(r6+1)];
	f2 = heapFloat[(r7+5)];
	f3 = heapFloat[(r6+2)];
	f4 = heapFloat[(r6+5)];
	f5 = heapFloat[(r6+6)];
	f1 = f1*f0;
	f3 = f3*f2;
	f6 = heapFloat[(r7+6)];
	f7 = heapFloat[(r6+3)];
	f8 = heapFloat[(r6+9)];
	f9 = heapFloat[(r6+10)];
	f10 = heapFloat[(r6+7)];
	f4 = f4*f0;
	f5 = f5*f2;
	f1 = f1+f3;
	f3 = f7*f6;
	f7 = heapFloat[(r6+11)];
	f0 = f8*f0;
	f2 = f9*f2;
	f4 = f4+f5;
	f5 = f10*f6;
	f1 = f1+f3;
	f3 = heapFloat[(r6+13)];
	f8 = heapFloat[(r6+15)];
	f9 = heapFloat[(r6+14)];
	r10 = sp + -48;
	f4 = f4+f5;
	f0 = f0+f2;
	f2 = f7*f6;
	f1 = f1+f3;
	f0 = f0+f2;
	r11 = r10 >> 2;
	f2 = f4+f9;
	heapFloat[(fp+-12)] = f1;
	f0 = f0+f8;
	heapFloat[(r11+1)] = f2;
	heapFloat[(r11+2)] = f0;
	heap32[(r11+3)] = 0;
	r5 = heap32[(r5+5)];
	heap32[(g0)] = r5;
	heap32[(g0+1)] = r10;
	heap32[(g0+2)] = r9;
	heap32[(g0+3)] = r1;
	__FUNCTION_TABLE__[(r8)>>2](i7);
	r5 = heap32[(r0+13)];
	r5 = r5 >> 2;
	r8 = heap32[(r5+5)];
	r8 = r8 >> 2;
	f0 = heapFloat[(r7)];
	f1 = heapFloat[(r6+1)];
	f2 = heapFloat[(r7+1)];
	f3 = heapFloat[(r6+2)];
	r8 = heap32[(r8)];
	f4 = heapFloat[(r6+5)];
	f5 = heapFloat[(r6+6)];
	f1 = f1*f0;
	f3 = f3*f2;
	f6 = heapFloat[(r7+2)];
	f7 = heapFloat[(r6+3)];
	r8 = r8 >> 2;
	f8 = heapFloat[(r6+9)];
	f9 = heapFloat[(r6+10)];
	f10 = heapFloat[(r6+7)];
	f4 = f4*f0;
	f5 = f5*f2;
	f1 = f1+f3;
	f3 = f7*f6;
	f7 = heapFloat[(r6+11)];
	r8 = heap32[(r8+2)];
	f0 = f8*f0;
	f2 = f9*f2;
	f4 = f4+f5;
	f5 = f10*f6;
	f1 = f1+f3;
	f3 = heapFloat[(r6+13)];
	f8 = heapFloat[(r6+15)];
	f9 = heapFloat[(r6+14)];
	r9 = sp + -32;
	f4 = f4+f5;
	f0 = f0+f2;
	f2 = f7*f6;
	f1 = f1+f3;
	f0 = f0+f2;
	r10 = r9 >> 2;
	f2 = f4+f9;
	heapFloat[(fp+-8)] = f1;
	f0 = f0+f8;
	heapFloat[(r10+1)] = f2;
	heapFloat[(r10+2)] = f0;
	heap32[(r10+3)] = 0;
	f0 = heapFloat[(r7+8)];
	f1 = heapFloat[(r6+1)];
	f2 = heapFloat[(r7+9)];
	f3 = heapFloat[(r6+2)];
	f4 = heapFloat[(r6+5)];
	f5 = heapFloat[(r6+6)];
	f1 = f1*f0;
	f3 = f3*f2;
	f6 = heapFloat[(r7+10)];
	f7 = heapFloat[(r6+3)];
	f8 = heapFloat[(r6+9)];
	f9 = heapFloat[(r6+10)];
	f10 = heapFloat[(r6+7)];
	f4 = f4*f0;
	f5 = f5*f2;
	f1 = f1+f3;
	f3 = f7*f6;
	f7 = heapFloat[(r6+11)];
	f0 = f8*f0;
	f2 = f9*f2;
	f4 = f4+f5;
	f5 = f10*f6;
	f1 = f1+f3;
	f3 = heapFloat[(r6+13)];
	f8 = heapFloat[(r6+15)];
	f9 = heapFloat[(r6+14)];
	r6 = sp + -16;
	f4 = f4+f5;
	f0 = f0+f2;
	f2 = f7*f6;
	f1 = f1+f3;
	f0 = f0+f2;
	r7 = r6 >> 2;
	f2 = f4+f9;
	heapFloat[(fp+-4)] = f1;
	f0 = f0+f8;
	heapFloat[(r7+1)] = f2;
	heapFloat[(r7+2)] = f0;
	heap32[(r7+3)] = 0;
	r5 = heap32[(r5+5)];
	heap32[(g0)] = r5;
	heap32[(g0+1)] = r6;
	heap32[(g0+2)] = r9;
	heap32[(g0+3)] = r1;
	__FUNCTION_TABLE__[(r8)>>2](i7);
}
}
}
	r1 = heap32[(r0+1)];
	r1 = r1 >> 2;
	r1 = heap32[(r1+48)];
	r1 = r1 >> 2;
	r1 = heap32[(r1+1)];
if(!(r1 >19)) //_LBB277_9
{
	r1 = heap32[(fp+2)];
	r5 = heap32[(fp+3)];
	r6 = sp + -216;
	r7 = r6 >> 2;
	heap32[(r7+2)] = 0;
	heap32[(r7+3)] = 1065353216;
	heap32[(r7+4)] = 1065353216;
	r8 = _ZTV15btTriangleShape;
	heap32[(r7+5)] = 1065353216;
	r8 = (r8 + 8)|0;
	heap32[(r7+6)] = 0;
	heap32[(fp+-54)] = r8;
	r2 = r2 >> 2;
	heap32[(r7+1)] = 1;
	heap32[(r7+13)] = heap32[(r2)];
	heap32[(r7+14)] = heap32[(r2+1)];
	heap32[(r7+15)] = heap32[(r2+2)];
	heap32[(r7+16)] = heap32[(r2+3)];
	heap32[(r7+17)] = heap32[(r2+4)];
	heap32[(r7+18)] = heap32[(r2+5)];
	heap32[(r7+19)] = heap32[(r2+6)];
	heap32[(r7+20)] = heap32[(r2+7)];
	heap32[(r7+21)] = heap32[(r2+8)];
	heap32[(r7+22)] = heap32[(r2+9)];
	heap32[(r7+23)] = heap32[(r2+10)];
	heap32[(r7+24)] = heap32[(r2+11)];
	r2 = r4 >> 2;
	heap32[(r7+11)] = heap32[(r0+14)];
	r4 = heap32[(r2+48)];
	heap32[(r2+48)] = r6;
	r6 = r3 >> 2;
	r7 = heap32[(r6)];
	r7 = r7 >> 2;
	r7 = heap32[(r7+2)];
	r8 = heap32[(r0+16)];
	r9 = heap32[(r0+2)];
	r10 = heap32[(r0+1)];
	heap32[(g0)] = r3;
	heap32[(g0+1)] = r10;
	heap32[(g0+2)] = r9;
	heap32[(g0+3)] = r8;
	__FUNCTION_TABLE__[(r7)>>2](i7);
	r7 = r_g0;
	r8 = heap32[(r0+11)];
	r9 = r8 >> 2;
	r10 = heap32[(r9)];
	r9 = heap32[(r9+34)];
	r11 = heap32[(r0+2)];
	if(r9 !=r11) //_LBB277_7
{
	r9 = r10 >> 2;
	r9 = heap32[(r9+3)];
	heap32[(g0)] = r8;
	heap32[(g0+1)] = r1;
	heap32[(g0+2)] = r5;
	__FUNCTION_TABLE__[(r9)>>2](i7);
}
else{
	r10 = r10 >> 2;
	r10 = heap32[(r10+2)];
	heap32[(g0)] = r8;
	heap32[(g0+1)] = r1;
	heap32[(g0+2)] = r5;
	__FUNCTION_TABLE__[(r10)>>2](i7);
}
	r1 = r7 >> 2;
	r5 = heap32[(r1)];
	r5 = r5 >> 2;
	r5 = heap32[(r5+2)];
	r8 = heap32[(r0+11)];
	r9 = heap32[(r0+13)];
	r10 = heap32[(r0+2)];
	r0 = heap32[(r0+1)];
	heap32[(g0)] = r7;
	heap32[(g0+1)] = r0;
	heap32[(g0+2)] = r10;
	heap32[(g0+3)] = r9;
	heap32[(g0+4)] = r8;
	__FUNCTION_TABLE__[(r5)>>2](i7);
	r0 = heap32[(r1)];
	r0 = r0 >> 2;
	r0 = heap32[(r0)];
	heap32[(g0)] = r7;
	__FUNCTION_TABLE__[(r0)>>2](i7);
	r0 = heap32[(r6)];
	r0 = r0 >> 2;
	r0 = heap32[(r0+13)];
	heap32[(g0)] = r3;
	heap32[(g0+1)] = r7;
	__FUNCTION_TABLE__[(r0)>>2](i7);
	heap32[(r2+48)] = r4;
}
	return;
}