function _ZN15btTransformUtil22calculateDiffAxisAngleERK11btTransformS2_R9btVector3Rf(sp)
{
	var i7;
	var fp = sp>>2;
	var r0;
	var r1;
	var r2;
	var f0;
	var f1;
	var f2;
	var f3;
	var f4;
	var f5;
	var f6;
	var f7;
	var f8;
	var f9;
	var f10;
	var f11;
	var f12;
	var f13;
	var f14;
	var f15;
	var f16;
	var f17;
	var f18;
	var f19;
	var f20;
	var f21;
	var f22;
	var f23;
var __label__ = 0;
	i7 = sp + -80;var g0 = i7>>2; // save stack
	r0 = heap32[(fp)];
	r0 = r0 >> 2;
	f0 = heapFloat[(r0+4)];
	f1 = heapFloat[(r0+9)];
	f2 = heapFloat[(r0+6)];
	f3 = heapFloat[(r0+8)];
	f4 = heapFloat[(r0+5)];
	f5 = heapFloat[(r0+10)];
	f6 = f4*f5;
	f7 = f2*f1;
	f8 = f2*f3;
	f9 = f0*f5;
	f10 = heapFloat[(r0)];
	f11 = heapFloat[(r0+1)];
	f6 = f6-f7;
	f7 = f8-f9;
	f8 = f0*f1;
	f9 = f4*f3;
	f12 = heapFloat[(r0+2)];
	f8 = f8-f9;
	f9 = f10*f6;
	f13 = f11*f7;
	f9 = f9+f13;
	f13 = f12*f8;
	r0 = heap32[(fp+1)];
	f14 =                         1;
	f9 = f9+f13;
	r0 = r0 >> 2;
	f9 = f14/f9;
	f13 = f12*f1;
	f15 = f11*f5;
	f5 = f10*f5;
	f16 = f12*f3;
	f13 = f13-f15;
	f5 = f5-f16;
	f15 = f11*f2;
	f16 = f12*f4;
	f12 = f12*f0;
	f2 = f10*f2;
	f3 = f11*f3;
	f1 = f10*f1;
	f6 = f6*f9;
	f17 = heapFloat[(r0)];
	f7 = f7*f9;
	f18 = heapFloat[(r0+1)];
	f15 = f15-f16;
	f2 = f12-f2;
	f12 = f13*f9;
	f5 = f5*f9;
	f1 = f3-f1;
	f3 = f10*f4;
	f0 = f11*f0;
	f4 = f6*f17;
	f10 = f7*f18;
	f8 = f8*f9;
	f11 = heapFloat[(r0+2)];
	f13 = heapFloat[(r0+8)];
	f15 = f15*f9;
	f16 = heapFloat[(r0+4)];
	f19 = heapFloat[(r0+9)];
	f2 = f2*f9;
	f20 = heapFloat[(r0+5)];
	f0 = f3-f0;
	f1 = f1*f9;
	f3 = heapFloat[(r0+10)];
	f21 = heapFloat[(r0+6)];
	f22 = f12*f17;
	f23 = f5*f18;
	f4 = f4+f10;
	f10 = f8*f11;
	f0 = f0*f9;
	r0 = sp + -48;
	f9 = f15*f17;
	f17 = f2*f18;
	f18 = f22+f23;
	f22 = f1*f11;
	f4 = f4+f10;
	r1 = r0 >> 2;
	f9 = f9+f17;
	f10 = f0*f11;
	f11 = f18+f22;
	heapFloat[(fp+-12)] = f4;
	f4 = f6*f16;
	f17 = f7*f20;
	f9 = f9+f10;
	heapFloat[(r1+1)] = f11;
	heapFloat[(r1+2)] = f9;
	f9 = f12*f16;
	f10 = f5*f20;
	f4 = f4+f17;
	f11 = f8*f21;
	f16 = f15*f16;
	f17 = f2*f20;
	f9 = f9+f10;
	f10 = f1*f21;
	f4 = f4+f11;
	heap32[(r1+3)] = 0;
	f11 = f16+f17;
	f16 = f0*f21;
	f9 = f9+f10;
	heapFloat[(r1+4)] = f4;
	f4 = f6*f13;
	f6 = f7*f19;
	f7 = f11+f16;
	heapFloat[(r1+5)] = f9;
	heapFloat[(r1+6)] = f7;
	f7 = f12*f13;
	f5 = f5*f19;
	f4 = f4+f6;
	f6 = f8*f3;
	f8 = f15*f13;
	f2 = f2*f19;
	f5 = f7+f5;
	f1 = f1*f3;
	f4 = f4+f6;
	heap32[(r1+7)] = 0;
	f2 = f8+f2;
	f0 = f0*f3;
	f1 = f5+f1;
	heapFloat[(r1+8)] = f4;
	f0 = f2+f0;
	heapFloat[(r1+9)] = f1;
	heapFloat[(r1+10)] = f0;
	heap32[(r1+11)] = 0;
	r1 = sp + -64;
	heap32[(g0)] = r0;
	heap32[(g0+1)] = r1;
	_ZNK11btMatrix3x311getRotationER12btQuaternion(i7);
	r0 = r1 >> 2;
	f0 = heapFloat[(fp+-16)];
	f1 = heapFloat[(r0+1)];
	f2 = heapFloat[(r0+2)];
	f3 = f0*f0;
	f4 = f1*f1;
	f5 = heapFloat[(r0+3)];
	f3 = f3+f4;
	f4 = f2*f2;
	f3 = f3+f4;
	f4 = f5*f5;
	f3 = f3+f4;
	heapFloat[(g0)] = f3;
	sqrtf(i7);
	f3 = f_g0;
	f4 =                         0;
	if(f3 !=f4) //_LBB245_2
{
	r1 = heap32[(fp+2)];
	r2 = heap32[(fp+3)];
	f3 = f14/f3;
	f0 = f0*f3;
	f1 = f1*f3;
	heapFloat[(fp+-16)] = f0;
	f2 = f2*f3;
	heapFloat[(r0+1)] = f1;
	f4 =                        -1;
	f3 = f5*f3;
	heapFloat[(r0+2)] = f2;
	f4 = f3 < f4 ? f4 : f3;
	heapFloat[(r0+3)] = f3;
	f3 = f4 > f14 ? f14 : f4;
	heapFloat[(g0)] = f3;
	acosf(i7);
	r0 = r2 >> 2;
	f3 = f_g0+f_g0;
	r1 = r1 >> 2;
	heapFloat[(r0)] = f3;
	heapFloat[(r1)] = f0;
	f0 = f0*f0;
	f3 = f1*f1;
	heapFloat[(r1+1)] = f1;
	f0 = f0+f3;
	f1 = f2*f2;
	f0 = f0+f1;
	heapFloat[(r1+2)] = f2;
	heap32[(r1+3)] = 0;
	f1 =   1.4210854715202004e-014;
	if(f0 >=f1) //_LBB245_4
{
	heapFloat[(g0)] = f0;
	sqrtf(i7);
	f0 = f14/f_g0;
	f1 = heapFloat[(r1)];
	f1 = f1*f0;
	heapFloat[(r1)] = f1;
	f1 = heapFloat[(r1+1)];
	f1 = f1*f0;
	heapFloat[(r1+1)] = f1;
	f1 = heapFloat[(r1+2)];
	f0 = f1*f0;
	heapFloat[(r1+2)] = f0;
	return;
}
else{
	heap32[(r1)] = 1065353216;
	heap32[(r1+1)] = 0;
	heap32[(r1+2)] = 0;
	heap32[(r1+3)] = 0;
	return;
}
}
else{
	r0 = _2E_str584;
	r1 = _2E_str685;
	heap32[(g0)] = r0;
	heap32[(g0+1)] = r1;
	heap32[(g0+2)] = 188;
	_assert(i7);
}
}