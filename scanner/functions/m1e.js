function m1e(e,t,r){let{isVirtualized:n,keyboardDelegate:i,focusMode:a,scrollRef:l,getRowText:s,onRowAction:u,onCellAction:c}=e,{selectionManager:d}=t;!e["aria-label"]&&!e["aria-labelledby"]&&console.warn("An aria-label or aria-labelledby prop is required for accessibility.");let f=hd({usage:"search",sensitivity:"base"}),{direction:h}=pr(),p=t.selectionManager.disabledBehavior,m=O.useMemo(()=>i||new Nee({collection:t.collection,disabledKeys:p==="selection"?new Set:t.disabledKeys,ref:r,direction:h,collator:f,focusMode:a}),[i,t.collection,t.disabledKeys,p,r,h,f,a]),{collectionProps:g}=NR({ref:r,selectionManager:d,keyboardDelegate:m,isVirtualized:n,scrollRef:l}),b=nr(e.id);eI.set(t,{keyboardDelegate:m,actions:{onRowAction:u,onCellAction:c}});let v=p1e({selectionManager:d,hasItemActions:!!(u||c)}),y=Kt(e,{labelable:!0}),$=O.useCallback(A=>{if(d.isFocused){A.currentTarget.contains(A.target)||d.setFocused(!1);return}A.currentTarget.contains(A.target)&&d.setFocused(!0)},[d]),x=O.useMemo(()=>({onBlur:g.onBlur,onFocus:$}),[$,g.onBlur]),k=_pe(r,{isDisabled:t.collection.size!==0}),C=$e(y,{role:"grid",id:b,"aria-multiselectable":d.selectionMode==="multiple"?"true":void 0},t.isKeyboardNavigationDisabled?x:g,t.collection.size===0&&{tabIndex:k?-1:0},v);return n&&(C["aria-rowcount"]=t.collection.size,C["aria-colcount"]=t.collection.columnCount),h1e({getRowText:s},t),{gridProps:C}}