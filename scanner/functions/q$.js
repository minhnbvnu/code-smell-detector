function q$(e,t){function n(e,n){0===n.length&&X$("Splines require at least one points"),1===n.length&&n.push(n[0]);var r=n.length,i=null,o=null;if(t.close){if(i=new Float32Array(r),0===t.intervals.length){o=new Float32Array(r);for(var a=0;a<o.length;a++)o[a]=a}else o=t.intervals;e.computeCloseCoefficients(r,i,o,n)}else X$("Open splines are not supported yet!")}t.classHierarchy.push("vtkSpline3D"),e.computeCoefficients=function(e){var r=e.map((function(e){return e[0]})),i=e.map((function(e){return e[1]})),o=e.map((function(e){return e[2]}));n(t.splineX,r),n(t.splineY,i),n(t.splineZ,o)},e.getPoint=function(e,n){return[t.splineX.getValue(e,n),t.splineY.getValue(e,n),t.splineZ.getValue(e,n)]},t.kind===K$.KOCHANEK_SPLINE?(t.splineX=H$.newInstance({tension:t.tension,continuity:t.continuity,bias:t.bias}),t.splineY=H$.newInstance({tension:t.tension,continuity:t.continuity,bias:t.bias}),t.splineZ=H$.newInstance({tension:t.tension,continuity:t.continuity,bias:t.bias})):t.kind===K$.CARDINAL_SPLINE?(t.splineX=j$.newInstance(),t.splineY=j$.newInstance(),t.splineZ=j$.newInstance()):X$("Unknown spline type ".concat(t.kind))}