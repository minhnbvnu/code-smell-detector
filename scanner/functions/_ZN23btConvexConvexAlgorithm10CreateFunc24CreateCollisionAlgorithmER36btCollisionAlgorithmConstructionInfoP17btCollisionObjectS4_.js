function _ZN23btConvexConvexAlgorithm10CreateFunc24CreateCollisionAlgorithmER36btCollisionAlgorithmConstructionInfoP17btCollisionObjectS4_(sp)
{
	var i7;
	var fp = sp>>2;
	var r0;
	var r1;
	var r2;
	var r3;
	var r4;
	var r5;
	var r6;
	var r7;
	var r8;
var __label__ = 0;
	i7 = sp + -8;var g0 = i7>>2; // save stack
	r0 = heap32[(fp+1)];
	r0 = r0 >> 2;
	r1 = heap32[(r0)];
	r2 = r1 >> 2;
	r2 = heap32[(r2)];
	r2 = r2 >> 2;
	r2 = heap32[(r2+12)];
	heap32[(g0)] = r1;
	heap32[(g0+1)] = 36;
	r1 = heap32[(fp)];
	__FUNCTION_TABLE__[(r2)>>2](i7);
	r1 = r1 >> 2;
	r3 = _ZTV20btCollisionAlgorithm;
	r4 = heap32[(r1+5)];
	r5 = heap32[(r1+4)];
	r6 = heap32[(r0+1)];
	r7 = heap32[(r1+2)];
	r1 = heap32[(r1+3)];
	r8 = r_g0 >> 2;
	r3 = (r3 + 8)|0;
	heap32[(r8)] = r3;
	r0 = heap32[(r0)];
	r3 = _ZTV23btConvexConvexAlgorithm;
	r3 = (r3 + 8)|0;
	heap32[(r8+1)] = r0;
	heap32[(r8)] = r3;
	heap32[(r8+2)] = r1;
	r0 = 0;
	heap32[(r8+3)] = r7;
	heap8[r_g0+16] = r0;
	heap32[(r8+5)] = r6;
	heap8[r_g0+24] = r0;
	heap32[(r8+7)] = r5;
	heap32[(r8+8)] = r4;
	return;
}