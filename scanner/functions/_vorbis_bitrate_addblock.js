function _vorbis_bitrate_addblock($vb) {
 $vb = $vb|0;
 var $$ = 0, $$0 = 0, $$9 = 0, $$choice$7 = 0, $$lcssa = 0, $$pre = 0, $$pre68 = 0, $$pre69 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0;
 var $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $choice$03980 = 0;
 var $choice$2 = 0, $choice$3 = 0, $choice$430 = 0, $choice$5 = 0, $choice$622 = 0, $choice$7 = 0, $minsize$020 = 0, $or$cond = 0, $or$cond37 = 0, $or$cond4 = 0, $or$cond444 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond7 = 0, $or$cond8 = 0, $slew$0 = 0.0, $slew$1 = 0.0, $this_bits$2 = 0, $this_bits$329 = 0, $this_bits$4 = 0;
 var $this_bits$521 = 0, $this_bits$6 = 0, $this_bits$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vb)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vb)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($5)) + 112|0);
 $11 = +HEAPF64[$10>>3];
 $12 = (+_rint($11));
 $13 = (~~(($12)));
 $14 = (((($1)) + 12|0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_oggpack_bytes($15)|0);
 $17 = $16 << 3;
 $18 = ((($vb)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 $21 = ((($5)) + 96|0);
 $22 = HEAP32[$21>>2]|0;
 if ($20) {
  $23 = ((($5)) + 100|0);
  $24 = HEAP32[$23>>2]|0;
  $120 = $22;$137 = $23;$140 = $24;
 } else {
  $25 = ((($5)) + 104|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($5)) + 100|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = Math_imul($26, $22)|0;
  $30 = Math_imul($26, $28)|0;
  $120 = $29;$137 = $27;$140 = $30;
 }
 $31 = (($9) + ($19<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 >> 1;
 $34 = ((($9)) + 3372|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (+($35|0));
 $37 = ((($9)) + 3376|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $36 * $38;
 $40 = (~~(($39)));
 $41 = ((($5)) + 80|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0);
 $44 = ((($5)) + 120|0);
 if ($43) {
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(0|0);
  if (!($46)) {
   $$0 = -1;
   return ($$0|0);
  }
  HEAP32[$44>>2] = $vb;
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$44>>2] = $vb;
 $47 = ((($5)) + 92|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)>(0);
 if ($49) {
  if ($20) {
   $59 = $48;
  } else {
   $50 = ((($5)) + 104|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = Math_imul($51, $48)|0;
   $59 = $52;
  }
  $53 = ((($9)) + 3384|0);
  $54 = +HEAPF64[$53>>3];
  $55 = 15.0 / $54;
  $56 = ((($5)) + 84|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($17) - ($59))|0;
  $60 = (($57) + ($58))|0;
  $61 = ($60|0)>($40|0);
  L17: do {
   if ($61) {
    $62 = ($13|0)>(0);
    $63 = ($17|0)>($59|0);
    $or$cond37 = $63 & $62;
    if ($or$cond37) {
     $64 = (($17) - ($59))|0;
     $65 = (($64) + ($57))|0;
     $66 = ($65|0)>($40|0);
     if ($66) {
      $choice$03980 = $13;
      while(1) {
       $67 = (($choice$03980) + -1)|0;
       $68 = (((($1)) + 12|0) + ($67<<2)|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (_oggpack_bytes($69)|0);
       $71 = $70 << 3;
       $72 = ($choice$03980|0)>(1);
       $73 = ($71|0)>($59|0);
       $or$cond = $73 & $72;
       if (!($or$cond)) {
        $choice$2 = $67;
        break L17;
       }
       $$pre68 = HEAP32[$56>>2]|0;
       $74 = (($71) - ($59))|0;
       $75 = (($74) + ($$pre68))|0;
       $76 = ($75|0)>($40|0);
       if ($76) {
        $choice$03980 = $67;
       } else {
        $choice$2 = $67;
        break;
       }
      }
     } else {
      $choice$2 = $13;
     }
    } else {
     $choice$2 = $13;
    }
   } else {
    $77 = ($60|0)<($40|0);
    if ($77) {
     $78 = (($13) + 1)|0;
     $79 = ($78|0)<(15);
     $80 = ($17|0)<($59|0);
     $or$cond444 = $80 & $79;
     if ($or$cond444) {
      $81 = (($17) - ($59))|0;
      $82 = (($81) + ($57))|0;
      $83 = ($82|0)<($40|0);
      if ($83) {
       $85 = $78;
       while(1) {
        $84 = (((($1)) + 12|0) + ($85<<2)|0);
        $86 = HEAP32[$84>>2]|0;
        $87 = (_oggpack_bytes($86)|0);
        $88 = $87 << 3;
        $89 = (($85) + 1)|0;
        $90 = ($89|0)<(15);
        $91 = ($88|0)<($59|0);
        $or$cond4 = $91 & $90;
        if (!($or$cond4)) {
         $choice$2 = $85;
         break L17;
        }
        $$pre = HEAP32[$56>>2]|0;
        $92 = (($88) - ($59))|0;
        $93 = (($92) + ($$pre))|0;
        $94 = ($93|0)<($40|0);
        if ($94) {
         $85 = $89;
        } else {
         $choice$2 = $85;
         break;
        }
       }
      } else {
       $choice$2 = $13;
      }
     } else {
      $choice$2 = $13;
     }
    } else {
     $choice$2 = $13;
    }
   }
  } while(0);
  $95 = (+($choice$2|0));
  $96 = +HEAPF64[$10>>3];
  $97 = $95 - $96;
  $98 = (+_rint($97));
  $99 = (+($33|0));
  $100 = $98 / $99;
  $101 = ((($7)) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (+($102|0));
  $104 = $103 * $100;
  $105 = -$55;
  $106 = $104 < $105;
  $slew$0 = $106 ? $105 : $104;
  $107 = $slew$0 > $55;
  $slew$1 = $107 ? $55 : $slew$0;
  $108 = $slew$1 / $103;
  $109 = $108 * $99;
  $110 = $109 + $96;
  HEAPF64[$10>>3] = $110;
  $111 = (+_rint($110));
  $112 = (~~(($111)));
  $113 = (((($1)) + 12|0) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (_oggpack_bytes($114)|0);
  $116 = $115 << 3;
  $$pre69 = HEAP32[$21>>2]|0;
  $117 = $$pre69;$choice$3 = $112;$this_bits$2 = $116;
 } else {
  $117 = $22;$choice$3 = $13;$this_bits$2 = $17;
 }
 $118 = ($117|0)>(0);
 $119 = ($this_bits$2|0)<($120|0);
 $or$cond5 = $119 & $118;
 L31: do {
  if ($or$cond5) {
   $121 = ((($5)) + 88|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($this_bits$2) - ($120))|0;
   $124 = (($123) + ($122))|0;
   $125 = ($124|0)<(0);
   if ($125) {
    $choice$430 = $choice$3;$this_bits$329 = $this_bits$2;
    while(1) {
     $126 = (($choice$430) + 1)|0;
     $127 = ($choice$430|0)>(13);
     if ($127) {
      $choice$5 = $126;$this_bits$4 = $this_bits$329;
      break L31;
     }
     $128 = (((($1)) + 12|0) + ($126<<2)|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (_oggpack_bytes($129)|0);
     $131 = $130 << 3;
     $132 = HEAP32[$121>>2]|0;
     $133 = (($131) - ($120))|0;
     $134 = (($133) + ($132))|0;
     $135 = ($134|0)<(0);
     if ($135) {
      $choice$430 = $126;$this_bits$329 = $131;
     } else {
      $choice$5 = $126;$this_bits$4 = $131;
      break;
     }
    }
   } else {
    $choice$5 = $choice$3;$this_bits$4 = $this_bits$2;
   }
  } else {
   $choice$5 = $choice$3;$this_bits$4 = $this_bits$2;
  }
 } while(0);
 $136 = HEAP32[$137>>2]|0;
 $138 = ($136|0)>(0);
 $139 = ($this_bits$4|0)>($140|0);
 $or$cond6 = $139 & $138;
 L37: do {
  if ($or$cond6) {
   $141 = ((($5)) + 88|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($this_bits$4) - ($140))|0;
   $144 = (($143) + ($142))|0;
   $145 = HEAP32[$34>>2]|0;
   $146 = ($144|0)>($145|0);
   if ($146) {
    $choice$622 = $choice$5;$this_bits$521 = $this_bits$4;
    while(1) {
     $147 = (($choice$622) + -1)|0;
     $148 = ($choice$622|0)<(1);
     if ($148) {
      $choice$7 = $147;$this_bits$6 = $this_bits$521;
      break L37;
     }
     $149 = (((($1)) + 12|0) + ($147<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (_oggpack_bytes($150)|0);
     $152 = $151 << 3;
     $153 = HEAP32[$141>>2]|0;
     $154 = (($152) - ($140))|0;
     $155 = (($154) + ($153))|0;
     $156 = HEAP32[$34>>2]|0;
     $157 = ($155|0)>($156|0);
     if ($157) {
      $choice$622 = $147;$this_bits$521 = $152;
     } else {
      $choice$7 = $147;$this_bits$6 = $152;
      break;
     }
    }
   } else {
    $choice$7 = $choice$5;$this_bits$6 = $this_bits$4;
   }
  } else {
   $choice$7 = $choice$5;$this_bits$6 = $this_bits$4;
  }
 } while(0);
 $158 = ($choice$7|0)<(0);
 if ($158) {
  $159 = HEAP32[$34>>2]|0;
  $160 = ((($5)) + 88|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (($159) + ($140))|0;
  $163 = (($162) - ($161))|0;
  $164 = (($163|0) / 8)&-1;
  $165 = ((($5)) + 124|0);
  HEAP32[$165>>2] = 0;
  $166 = ((($1)) + 12|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (_oggpack_bytes($167)|0);
  $169 = ($168|0)>($164|0);
  if ($169) {
   $170 = HEAP32[$166>>2]|0;
   $171 = $164 << 3;
   _oggpack_writetrunc($170,$171);
   $172 = HEAP32[$166>>2]|0;
   $173 = (_oggpack_bytes($172)|0);
   $174 = $173 << 3;
   $this_bits$7 = $174;
  } else {
   $this_bits$7 = $this_bits$6;
  }
 } else {
  $175 = ((($5)) + 88|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = (($120) + 7)|0;
  $178 = (($177) - ($176))|0;
  $179 = (($178|0) / 8)&-1;
  $180 = ($choice$7|0)>(14);
  $$choice$7 = $180 ? 14 : $choice$7;
  $181 = ((($5)) + 124|0);
  HEAP32[$181>>2] = $$choice$7;
  $182 = (((($1)) + 12|0) + ($$choice$7<<2)|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (_oggpack_bytes($183)|0);
  $185 = (($179) - ($184))|0;
  $186 = ($185|0)>(0);
  $187 = HEAP32[$182>>2]|0;
  if ($186) {
   $189 = $187;$minsize$020 = $185;
   while(1) {
    $188 = (($minsize$020) + -1)|0;
    _oggpack_write($189,0,8);
    $190 = ($minsize$020|0)>(1);
    $191 = HEAP32[$182>>2]|0;
    if ($190) {
     $189 = $191;$minsize$020 = $188;
    } else {
     $$lcssa = $191;
     break;
    }
   }
  } else {
   $$lcssa = $187;
  }
  $192 = (_oggpack_bytes($$lcssa)|0);
  $193 = $192 << 3;
  $this_bits$7 = $193;
 }
 $194 = HEAP32[$21>>2]|0;
 $195 = ($194|0)>(0);
 if ($195) {
  label = 37;
 } else {
  $196 = HEAP32[$137>>2]|0;
  $197 = ($196|0)>(0);
  if ($197) {
   label = 37;
  }
 }
 do {
  if ((label|0) == 37) {
   $198 = ($140|0)>(0);
   $199 = ($this_bits$7|0)>($140|0);
   $or$cond7 = $198 & $199;
   if ($or$cond7) {
    $200 = (($this_bits$7) - ($140))|0;
    $201 = ((($5)) + 88|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = (($200) + ($202))|0;
    HEAP32[$201>>2] = $203;
    break;
   }
   $204 = ($120|0)>(0);
   $205 = ($this_bits$7|0)<($120|0);
   $or$cond8 = $204 & $205;
   if ($or$cond8) {
    $206 = (($this_bits$7) - ($120))|0;
    $207 = ((($5)) + 88|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + ($208))|0;
    HEAP32[$207>>2] = $209;
    break;
   }
   $210 = ((($5)) + 88|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = ($211|0)>($40|0);
   if ($212) {
    if ($198) {
     $213 = (($this_bits$7) - ($140))|0;
     $214 = (($211) + ($213))|0;
     $215 = ($214|0)<($40|0);
     $$ = $215 ? $40 : $214;
     HEAP32[$210>>2] = $$;
     break;
    } else {
     HEAP32[$210>>2] = $40;
     break;
    }
   } else {
    if ($204) {
     $216 = (($this_bits$7) - ($120))|0;
     $217 = (($211) + ($216))|0;
     $218 = ($217|0)>($40|0);
     $$9 = $218 ? $40 : $217;
     HEAP32[$210>>2] = $$9;
     break;
    } else {
     HEAP32[$210>>2] = $40;
     break;
    }
   }
  }
 } while(0);
 $219 = HEAP32[$47>>2]|0;
 $220 = ($219|0)>(0);
 if (!($220)) {
  $$0 = 0;
  return ($$0|0);
 }
 $221 = HEAP32[$18>>2]|0;
 $222 = ($221|0)==(0);
 if ($222) {
  $227 = $219;
 } else {
  $223 = ((($5)) + 104|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = Math_imul($224, $219)|0;
  $227 = $225;
 }
 $226 = (($this_bits$7) - ($227))|0;
 $228 = ((($5)) + 84|0);
 $229 = HEAP32[$228>>2]|0;
 $230 = (($226) + ($229))|0;
 HEAP32[$228>>2] = $230;
 $$0 = 0;
 return ($$0|0);
}