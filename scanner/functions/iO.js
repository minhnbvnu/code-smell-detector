function iO(e){let t=aO(e),n=Ha,o=["any","void","number","boolean","string","object","never","symbol","bigint","unknown"],s={beginKeywords:"namespace",end:/\{/,excludeEnd:!0,contains:[t.exports.CLASS_REFERENCE]},c={beginKeywords:"interface",end:/\{/,excludeEnd:!0,keywords:{keyword:"interface extends",built_in:o},contains:[t.exports.CLASS_REFERENCE]},u={className:"meta",relevance:10,begin:/^\s*['"]use strict['"]/},d=["type","namespace","interface","public","private","protected","implements","declare","abstract","readonly","enum","override"],S={$pattern:Ha,keyword:EE.concat(d),literal:SE,built_in:vE.concat(o),"variable.language":TE},b={className:"meta",begin:"@"+n},h=(N,I,w)=>{let y=N.contains.findIndex(B=>B.label===I);if(y===-1)throw new Error("can not find mode to replace");N.contains.splice(y,1,w)};Object.assign(t.keywords,S),t.exports.PARAMS_CONTAINS.push(b),t.contains=t.contains.concat([b,s,c]),h(t,"shebang",e.SHEBANG()),h(t,"use_strict",u);let A=t.contains.find(N=>N.label==="func.def");return A.relevance=0,Object.assign(t,{name:"TypeScript",aliases:["ts","tsx","mts","cts"]}),t}