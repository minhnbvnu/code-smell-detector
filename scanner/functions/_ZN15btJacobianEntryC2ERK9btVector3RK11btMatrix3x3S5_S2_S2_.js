function _ZN15btJacobianEntryC2ERK9btVector3RK11btMatrix3x3S5_S2_S2_(sp)
{
	var i7;
	var fp = sp>>2;
	var r0;
	var r1;
	var r2;
	var f0;
	var f1;
	var f2;
	var f3;
	var f4;
	var f5;
	var f6;
	var f7;
	var f8;
	var f9;
	var f10;
	var f11;
	var f12;
	var f13;
	var f14;
var __label__ = 0;
	i7 = sp + -16;var g0 = i7>>2; // save stack
	r0 = heap32[(fp)];
	r0 = r0 >> 2;
	heap32[(r0)] = 0;
	heap32[(r0+1)] = 0;
	r1 = heap32[(fp+1)];
	r2 = heap32[(fp+2)];
	heap32[(r0+2)] = 0;
	r1 = r1 >> 2;
	heap32[(r0+3)] = 0;
	r2 = r2 >> 2;
	f0 = heapFloat[(r1)];
	f1 = heapFloat[(r2)];
	f2 = heapFloat[(r1+1)];
	f3 = heapFloat[(r2+1)];
	f4 = heapFloat[(r2+4)];
	f5 = heapFloat[(r2+5)];
	f1 = f1*f0;
	f3 = f3*f2;
	f6 = heapFloat[(r1+2)];
	f7 = heapFloat[(r2+2)];
	f8 = heapFloat[(r2+8)];
	f9 = heapFloat[(r2+9)];
	f10 = heapFloat[(r2+10)];
	f11 = heapFloat[(r2+6)];
	f4 = f4*f0;
	f5 = f5*f2;
	f1 = f1+f3;
	f3 = f7*f6;
	f0 = f8*f0;
	f2 = f9*f2;
	f4 = f4+f5;
	f5 = f11*f6;
	f1 = f1+f3;
	f0 = f0+f2;
	f2 = f10*f6;
	f3 = f4+f5;
	heapFloat[(r0+4)] = f1;
	f0 = f0+f2;
	heapFloat[(r0+5)] = f3;
	heapFloat[(r0+6)] = f0;
	heap32[(r0+7)] = 0;
	r2 = heap32[(fp+3)];
	r2 = r2 >> 2;
	f2 = heapFloat[(r1)];
	f2 = -f2;
	f4 = heapFloat[(r2)];
	f5 = heapFloat[(r1+1)];
	f6 = heapFloat[(r2+1)];
	f7 = heapFloat[(r2+4)];
	f8 = heapFloat[(r2+5)];
	f4 = f4*f2;
	f6 = f6*f5;
	f9 = heapFloat[(r1+2)];
	f10 = heapFloat[(r2+2)];
	f11 = heapFloat[(r2+8)];
	f12 = heapFloat[(r2+9)];
	f13 = heapFloat[(r2+10)];
	f14 = heapFloat[(r2+6)];
	f7 = f7*f2;
	f8 = f8*f5;
	f4 = f4-f6;
	f6 = f10*f9;
	f2 = f11*f2;
	f5 = f12*f5;
	f7 = f7-f8;
	f8 = f14*f9;
	f4 = f4-f6;
	f2 = f2-f5;
	f5 = f13*f9;
	f6 = f7-f8;
	heapFloat[(r0+8)] = f4;
	f2 = f2-f5;
	heapFloat[(r0+9)] = f6;
	r1 = heap32[(fp+4)];
	heapFloat[(r0+10)] = f2;
	r1 = r1 >> 2;
	heap32[(r0+11)] = 0;
	f5 = heapFloat[(r1+2)];
	f7 = heapFloat[(r1+1)];
	f8 = heapFloat[(r1)];
	f8 = f8*f1;
	f7 = f7*f3;
	heapFloat[(r0+12)] = f8;
	f5 = f5*f0;
	heapFloat[(r0+13)] = f7;
	r1 = heap32[(fp+5)];
	heapFloat[(r0+14)] = f5;
	r1 = r1 >> 2;
	heap32[(r0+15)] = 0;
	f9 = heapFloat[(r1+2)];
	f10 = heapFloat[(r1+1)];
	f11 = heapFloat[(r1)];
	f10 = f10*f6;
	f11 = f11*f4;
	f9 = f9*f2;
	heapFloat[(r0+16)] = f11;
	f1 = f8*f1;
	f3 = f7*f3;
	f4 = f11*f4;
	f6 = f10*f6;
	heapFloat[(r0+17)] = f10;
	f1 = f1+f3;
	f0 = f5*f0;
	f3 = f4+f6;
	f2 = f9*f2;
	heapFloat[(r0+18)] = f9;
	f0 = f1+f0;
	f1 = f3+f2;
	f0 = f0+f1;
	heap32[(r0+19)] = 0;
	f1 =                         0;
	heapFloat[(r0+20)] = f0;
	if(f0 >f1) //_LBB588_2
{
	return;
}
else{
	r0 = _2E_str846;
	r1 = _2E_str947;
	heap32[(g0)] = r0;
	heap32[(g0+1)] = r1;
	heap32[(g0+2)] = 70;
	_assert(i7);
}
}