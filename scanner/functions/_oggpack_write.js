function _oggpack_write($b,$value,$bits) {
 $b = $b|0;
 $value = $value|0;
 $bits = $bits|0;
 var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits>>>0)>(32);
 do {
  if (!($0)) {
   $1 = HEAP32[$b>>2]|0;
   $2 = ((($b)) + 16|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($3) + -4)|0;
   $5 = ($1|0)<($4|0);
   $$phi$trans$insert = ((($b)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($5) {
    $25 = $$pre;
   } else {
    $6 = ($$pre|0)==(0|0);
    if ($6) {
     return;
    }
    $7 = ($3|0)>(2147483391);
    if ($7) {
     break;
    }
    $8 = ((($b)) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($3) + 256)|0;
    $11 = (_realloc($9,$10)|0);
    $12 = ($11|0)==(0|0);
    if ($12) {
     break;
    }
    HEAP32[$8>>2] = $11;
    $13 = HEAP32[$2>>2]|0;
    $14 = (($13) + 256)|0;
    HEAP32[$2>>2] = $14;
    $15 = HEAP32[$b>>2]|0;
    $16 = (($11) + ($15)|0);
    HEAP32[$$phi$trans$insert>>2] = $16;
    $25 = $16;
   }
   $17 = (8 + ($bits<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & $value;
   $20 = ((($b)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($bits))|0;
   $23 = $19 << $21;
   $24 = HEAP8[$25>>0]|0;
   $26 = $24&255;
   $27 = $26 | $23;
   $28 = $27&255;
   HEAP8[$25>>0] = $28;
   $29 = ($22|0)>(7);
   do {
    if ($29) {
     $30 = HEAP32[$20>>2]|0;
     $31 = (8 - ($30))|0;
     $32 = $19 >>> $31;
     $33 = $32&255;
     $34 = HEAP32[$$phi$trans$insert>>2]|0;
     $35 = ((($34)) + 1|0);
     HEAP8[$35>>0] = $33;
     $36 = ($22|0)>(15);
     if ($36) {
      $37 = HEAP32[$20>>2]|0;
      $38 = (16 - ($37))|0;
      $39 = $19 >>> $38;
      $40 = $39&255;
      $41 = HEAP32[$$phi$trans$insert>>2]|0;
      $42 = ((($41)) + 2|0);
      HEAP8[$42>>0] = $40;
      $43 = ($22|0)>(23);
      if ($43) {
       $44 = HEAP32[$20>>2]|0;
       $45 = (24 - ($44))|0;
       $46 = $19 >>> $45;
       $47 = $46&255;
       $48 = HEAP32[$$phi$trans$insert>>2]|0;
       $49 = ((($48)) + 3|0);
       HEAP8[$49>>0] = $47;
       $50 = ($22|0)>(31);
       if ($50) {
        $51 = HEAP32[$20>>2]|0;
        $52 = ($51|0)==(0);
        if ($52) {
         $58 = HEAP32[$$phi$trans$insert>>2]|0;
         $59 = ((($58)) + 4|0);
         HEAP8[$59>>0] = 0;
         break;
        } else {
         $53 = (32 - ($51))|0;
         $54 = $19 >>> $53;
         $55 = $54&255;
         $56 = HEAP32[$$phi$trans$insert>>2]|0;
         $57 = ((($56)) + 4|0);
         HEAP8[$57>>0] = $55;
         break;
        }
       }
      }
     }
    }
   } while(0);
   $60 = (($22|0) / 8)&-1;
   $61 = HEAP32[$b>>2]|0;
   $62 = (($61) + ($60))|0;
   HEAP32[$b>>2] = $62;
   $63 = HEAP32[$$phi$trans$insert>>2]|0;
   $64 = (($63) + ($60)|0);
   HEAP32[$$phi$trans$insert>>2] = $64;
   $65 = $22 & 7;
   HEAP32[$20>>2] = $65;
   return;
  }
 } while(0);
 $66 = ((($b)) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)==(0|0);
 if (!($68)) {
  _free($67);
 }
 ;HEAP32[$b>>2]=0|0;HEAP32[$b+4>>2]=0|0;HEAP32[$b+8>>2]=0|0;HEAP32[$b+12>>2]=0|0;HEAP32[$b+16>>2]=0|0;
 return;
}