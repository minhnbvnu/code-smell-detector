function conv3d_(e,t,n,r,o,a){void 0===o&&(o="NHWC"),void 0===a&&(a=[1,1,1]);var i=convertToTensor(e,"x","conv3d"),s=convertToTensor(t,"filter","conv3d"),u=i,l=!1;4===i.rank&&(l=!0,u=i.as5D(1,i.shape[0],i.shape[1],i.shape[2],i.shape[3])),assert(5===u.rank,"Error in conv3d: input must be rank 5, but got rank "+u.rank+"."),assert(5===s.rank,"Error in conv3d: filter must be rank 5, but got rank "+s.rank+"."),assert(u.shape[4]===s.shape[3],"Error in conv3d: depth of input ("+u.shape[4]+") must match input depth for filter "+s.shape[3]+"."),assert(eitherStridesOrDilationsAreOne$1(n,a),"Error in conv3D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"),assert("NHWC"===o,"Error in conv3d: got dataFormat of "+o+" but only NHWC is currently supported.");var c=computeConv3DInfo(u.shape,s.shape,n,a,r),p=ENV.engine.runKernel(function(e){return e.conv3d(u,s,c)},{x:u,$filter:s},function(e){return assert(tupleValuesAreOne$1(a),"Error in gradient of conv3D: dilation rates greater than 1 are notyet supported in gradients. Got dilations '"+a+"'"),{x:function(){return conv3dDerInput_(u.shape,e,s,n,r)},$filter:function(){return conv3dDerFilter_(u,e,s.shape,n,r)}}});return l?p.as4D(p.shape[1],p.shape[2],p.shape[3],p.shape[4]):p}