function _ZN15btJacobianEntryC2ERK11btMatrix3x3S2_RK9btVector3S5_S5_S5_fS5_f(sp)
{
	var i7;
	var fp = sp>>2;
	var r0;
	var r1;
	var r2;
	var f0;
	var f1;
	var f2;
	var f3;
	var f4;
	var f5;
	var f6;
	var f7;
	var f8;
	var f9;
	var f10;
	var f11;
	var f12;
	var f13;
	var f14;
var __label__ = 0;
	i7 = sp + -16;var g0 = i7>>2; // save stack
	r0 = heap32[(fp+5)];
	r1 = heap32[(fp)];
	r0 = r0 >> 2;
	r1 = r1 >> 2;
	f0 = heapFloat[(r0)];
	heapFloat[(r1)] = f0;
	f1 = heapFloat[(r0+1)];
	heapFloat[(r1+1)] = f1;
	f2 = heapFloat[(r0+2)];
	r2 = heap32[(fp+3)];
	heapFloat[(r1+2)] = f2;
	r2 = r2 >> 2;
	heap32[(r1+3)] = heap32[(r0+3)];
	f3 = heapFloat[(r2)];
	f4 = heapFloat[(r2+1)];
	f5 = heapFloat[(r2+2)];
	r0 = heap32[(fp+1)];
	r0 = r0 >> 2;
	f6 = f4*f2;
	f7 = f5*f1;
	f5 = f5*f0;
	f8 = f3*f2;
	f6 = f6-f7;
	f7 = heapFloat[(r0)];
	f5 = f5-f8;
	f8 = heapFloat[(r0+1)];
	f3 = f3*f1;
	f4 = f4*f0;
	f9 = heapFloat[(r0+4)];
	f10 = heapFloat[(r0+5)];
	f7 = f7*f6;
	f8 = f8*f5;
	f3 = f3-f4;
	f4 = heapFloat[(r0+2)];
	f11 = heapFloat[(r0+8)];
	f12 = heapFloat[(r0+9)];
	f13 = heapFloat[(r0+10)];
	f14 = heapFloat[(r0+6)];
	f9 = f9*f6;
	f10 = f10*f5;
	f7 = f7+f8;
	f4 = f4*f3;
	f6 = f11*f6;
	f5 = f12*f5;
	f8 = f9+f10;
	f9 = f14*f3;
	f4 = f7+f4;
	f5 = f6+f5;
	f3 = f13*f3;
	f6 = f8+f9;
	heapFloat[(r1+4)] = f4;
	f3 = f5+f3;
	heapFloat[(r1+5)] = f6;
	r0 = heap32[(fp+4)];
	heapFloat[(r1+6)] = f3;
	r0 = r0 >> 2;
	heap32[(r1+7)] = 0;
	f5 = heapFloat[(r0)];
	f7 = heapFloat[(r0+1)];
	f8 = heapFloat[(r0+2)];
	r0 = heap32[(fp+2)];
	r0 = r0 >> 2;
	f9 = f8*f1;
	f10 = f7*f2;
	f2 = f5*f2;
	f8 = f8*f0;
	f9 = f9-f10;
	f10 = heapFloat[(r0)];
	f2 = f2-f8;
	f8 = heapFloat[(r0+1)];
	f0 = f7*f0;
	f1 = f5*f1;
	f5 = heapFloat[(r0+4)];
	f7 = heapFloat[(r0+5)];
	f10 = f10*f9;
	f8 = f8*f2;
	f0 = f0-f1;
	f1 = heapFloat[(r0+2)];
	f11 = heapFloat[(r0+8)];
	f12 = heapFloat[(r0+9)];
	f13 = heapFloat[(r0+10)];
	f14 = heapFloat[(r0+6)];
	f5 = f5*f9;
	f7 = f7*f2;
	f8 = f10+f8;
	f1 = f1*f0;
	f9 = f11*f9;
	f2 = f12*f2;
	f5 = f5+f7;
	f7 = f14*f0;
	f1 = f8+f1;
	f2 = f9+f2;
	f0 = f13*f0;
	f5 = f5+f7;
	heapFloat[(r1+8)] = f1;
	f0 = f2+f0;
	heapFloat[(r1+9)] = f5;
	r0 = heap32[(fp+6)];
	heapFloat[(r1+10)] = f0;
	r0 = r0 >> 2;
	heap32[(r1+11)] = 0;
	f2 = heapFloat[(r0+2)];
	f7 = heapFloat[(r0+1)];
	f8 = heapFloat[(r0)];
	f8 = f8*f4;
	f7 = f7*f6;
	heapFloat[(r1+12)] = f8;
	f2 = f2*f3;
	heapFloat[(r1+13)] = f7;
	r0 = heap32[(fp+8)];
	heapFloat[(r1+14)] = f2;
	r0 = r0 >> 2;
	heap32[(r1+15)] = 0;
	f9 = heapFloat[(r0+2)];
	f10 = heapFloat[(r0+1)];
	f11 = heapFloat[(r0)];
	f4 = f8*f4;
	f6 = f7*f6;
	f7 = f10*f5;
	f8 = f11*f1;
	f4 = f4+f6;
	f2 = f2*f3;
	f3 = f9*f0;
	heapFloat[(r1+16)] = f8;
	f2 = f4+f2;
	f4 = heapFloat[(fp+7)];
	f1 = f8*f1;
	f5 = f7*f5;
	heapFloat[(r1+17)] = f7;
	f2 = f2+f4;
	f4 = heapFloat[(fp+9)];
	f1 = f1+f5;
	f0 = f3*f0;
	heapFloat[(r1+18)] = f3;
	f2 = f2+f4;
	f0 = f1+f0;
	f0 = f2+f0;
	heap32[(r1+19)] = 0;
	f1 =                         0;
	heapFloat[(r1+20)] = f0;
	if(f0 >f1) //_LBB585_2
{
	return;
}
else{
	r0 = _2E_str846;
	r1 = _2E_str947;
	heap32[(g0)] = r0;
	heap32[(g0+1)] = r1;
	heap32[(g0+2)] = 53;
	_assert(i7);
}
}