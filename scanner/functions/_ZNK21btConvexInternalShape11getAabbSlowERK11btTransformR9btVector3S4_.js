function _ZNK21btConvexInternalShape11getAabbSlowERK11btTransformR9btVector3S4_(sp)
{
	var i7;
	var fp = sp>>2;
	var r0;
	var r1;
	var r2;
	var r3;
	var r4;
	var r5;
	var r6;
	var r7;
	var r8;
	var r9;
	var r10;
	var r11;
	var r12;
	var f0;
	var f1;
	var f2;
	var f3;
	var f4;
	var f5;
	var f6;
	var f7;
	var f8;
	var f9;
	var f10;
	var f11;
	var f12;
var __label__ = 0;
	i7 = sp + -112;var g0 = i7>>2; // save stack
	r0 = heap32[(fp)];
	r1 = r0 >> 2;
	r2 = heap32[(r1)];
	r2 = r2 >> 2;
	r2 = heap32[(r2+11)];
	heap32[(g0)] = r0;
	r3 = heap32[(fp+1)];
	r4 = heap32[(fp+2)];
	r5 = heap32[(fp+3)];
	r6 = 0;
	__FUNCTION_TABLE__[(r2)>>2](i7);
	f0 = f_g0;
_1: while(true){
	r2 = sp + -64;
	r7 = r2 >> 2;
	heap32[(fp+-16)] = 0;
	heap32[(r7+1)] = 0;
	r8 = r6 << 2;
	r2 = (r2 - r8)|0;
	heap32[(r7+2)] = 0;
	r2 = r2 >> 2;
	heap32[(r7+3)] = 0;
	heap32[(r2)] = 1065353216;
	r9 = r3 >> 2;
	r10 = heap32[(r1)];
	f1 = heapFloat[(fp+-16)];
	f2 = heapFloat[(r9)];
	f3 = heapFloat[(r7+1)];
	f4 = heapFloat[(r9+4)];
	r10 = r10 >> 2;
	f5 = heapFloat[(r9+1)];
	f6 = heapFloat[(r9+5)];
	f2 = f2*f1;
	f4 = f4*f3;
	f7 = heapFloat[(r7+2)];
	f8 = heapFloat[(r9+8)];
	f9 = heapFloat[(r9+2)];
	f10 = heapFloat[(r9+6)];
	f11 = heapFloat[(r9+10)];
	f12 = heapFloat[(r9+9)];
	r10 = heap32[(r10+15)];
	f5 = f5*f1;
	f6 = f6*f3;
	f2 = f2+f4;
	f4 = f8*f7;
	r11 = sp + -48;
	f1 = f9*f1;
	f3 = f10*f3;
	f5 = f5+f6;
	f6 = f12*f7;
	f2 = f2+f4;
	r12 = r11 >> 2;
	f1 = f1+f3;
	f3 = f11*f7;
	f4 = f5+f6;
	heapFloat[(fp+-12)] = f2;
	f1 = f1+f3;
	heapFloat[(r12+1)] = f4;
	heapFloat[(r12+2)] = f1;
	heap32[(r12+3)] = 0;
	r12 = sp + -80;
	heap32[(g0)] = r12;
	heap32[(g0+1)] = r0;
	heap32[(g0+2)] = r11;
	__FUNCTION_TABLE__[(r10)>>2](i7);
	r10 = r12 >> 2;
	f1 = heapFloat[(fp+-20)];
	f2 = heapFloat[(r9)];
	f3 = heapFloat[(r10+1)];
	f4 = heapFloat[(r9+1)];
	f5 = heapFloat[(r9+4)];
	f6 = heapFloat[(r9+5)];
	f2 = f2*f1;
	f4 = f4*f3;
	f7 = heapFloat[(r10+2)];
	f8 = heapFloat[(r9+2)];
	f9 = heapFloat[(r9+8)];
	f10 = heapFloat[(r9+9)];
	f11 = heapFloat[(r9+6)];
	f5 = f5*f1;
	f6 = f6*f3;
	f2 = f2+f4;
	f4 = f8*f7;
	f8 = heapFloat[(r9+10)];
	f1 = f9*f1;
	f3 = f10*f3;
	f5 = f5+f6;
	f6 = f11*f7;
	f2 = f2+f4;
	f4 = heapFloat[(r9+12)];
	f9 = heapFloat[(r9+14)];
	f10 = heapFloat[(r9+13)];
	r10 = sp + -96;
	f5 = f5+f6;
	f1 = f1+f3;
	f3 = f8*f7;
	f2 = f2+f4;
	f1 = f1+f3;
	f3 = f5+f10;
	heapFloat[(fp+-24)] = f2;
	r11 = r10 >> 2;
	f1 = f1+f9;
	heapFloat[(r11+1)] = f3;
	heapFloat[(r11+2)] = f1;
	r10 = (r10 - r8)|0;
	heap32[(r11+3)] = 0;
	r10 = r10 >> 2;
	r12 = (r5 - r8)|0;
	f1 = heapFloat[(r10)];
	r12 = r12 >> 2;
	f1 = f1+f0;
	heapFloat[(r12)] = f1;
	heap32[(r2)] = -1082130432;
	r2 = heap32[(r1)];
	f1 = heapFloat[(fp+-16)];
	f2 = heapFloat[(r9)];
	f3 = heapFloat[(r7+1)];
	f4 = heapFloat[(r9+4)];
	r2 = r2 >> 2;
	f5 = heapFloat[(r9+1)];
	f6 = heapFloat[(r9+5)];
	f2 = f2*f1;
	f4 = f4*f3;
	f7 = heapFloat[(r7+2)];
	f8 = heapFloat[(r9+8)];
	f9 = heapFloat[(r9+2)];
	f10 = heapFloat[(r9+6)];
	f11 = heapFloat[(r9+10)];
	f12 = heapFloat[(r9+9)];
	r2 = heap32[(r2+15)];
	f5 = f5*f1;
	f6 = f6*f3;
	f2 = f2+f4;
	f4 = f8*f7;
	r7 = sp + -16;
	f1 = f9*f1;
	f3 = f10*f3;
	f5 = f5+f6;
	f6 = f12*f7;
	f2 = f2+f4;
	r12 = r7 >> 2;
	f1 = f1+f3;
	f3 = f11*f7;
	f4 = f5+f6;
	heapFloat[(fp+-4)] = f2;
	f1 = f1+f3;
	heapFloat[(r12+1)] = f4;
	heapFloat[(r12+2)] = f1;
	heap32[(r12+3)] = 0;
	r12 = sp + -32;
	heap32[(g0)] = r12;
	heap32[(g0+1)] = r0;
	heap32[(g0+2)] = r7;
	__FUNCTION_TABLE__[(r2)>>2](i7);
	r2 = r12 >> 2;
	f1 = heapFloat[(fp+-8)];
	f2 = heapFloat[(r9)];
	f3 = heapFloat[(r2+1)];
	f4 = heapFloat[(r9+1)];
	f5 = heapFloat[(r9+4)];
	f6 = heapFloat[(r9+5)];
	f2 = f2*f1;
	f4 = f4*f3;
	f7 = heapFloat[(r2+2)];
	f8 = heapFloat[(r9+2)];
	f9 = heapFloat[(r9+8)];
	f10 = heapFloat[(r9+9)];
	f11 = heapFloat[(r9+6)];
	f5 = f5*f1;
	f6 = f6*f3;
	f2 = f2+f4;
	f4 = f8*f7;
	f8 = heapFloat[(r9+10)];
	f1 = f9*f1;
	f3 = f10*f3;
	f5 = f5+f6;
	f6 = f11*f7;
	f2 = f2+f4;
	f4 = heapFloat[(r9+12)];
	f9 = heapFloat[(r9+14)];
	f10 = heapFloat[(r9+13)];
	f5 = f5+f6;
	f1 = f1+f3;
	f3 = f8*f7;
	f2 = f2+f4;
	f1 = f1+f3;
	f3 = f5+f10;
	heapFloat[(fp+-24)] = f2;
	f1 = f1+f9;
	heapFloat[(r11+1)] = f3;
	heapFloat[(r11+2)] = f1;
	heap32[(r11+3)] = 0;
	r2 = (r4 - r8)|0;
	f1 = heapFloat[(r10)];
	r6 = (r6 + -1)|0;
	r2 = r2 >> 2;
	f1 = f1-f0;
	heapFloat[(r2)] = f1;
	if(r6 !=-3) //_LBB457_1
{
continue _1;
}
else{
break _1;
}
}
	return;
}