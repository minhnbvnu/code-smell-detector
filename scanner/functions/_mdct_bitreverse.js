function _mdct_bitreverse($init$0$0$val,$init$0$2$val,$init$0$3$val,$x) {
 $init$0$0$val = $init$0$0$val|0;
 $init$0$2$val = $init$0$2$val|0;
 $init$0$3$val = $init$0$3$val|0;
 $x = $x|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0;
 var $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $8 = 0, $9 = 0.0, $T$0 = 0, $bit$0 = 0, $w0$0 = 0, $w1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $init$0$0$val >> 1;
 $1 = (($x) + ($0<<2)|0);
 $2 = (($init$0$2$val) + ($init$0$0$val<<2)|0);
 $T$0 = $2;$bit$0 = $init$0$3$val;$w0$0 = $x;$w1$0 = $1;
 while(1) {
  $3 = HEAP32[$bit$0>>2]|0;
  $$sum = (($3) + ($0))|0;
  $4 = (($x) + ($$sum<<2)|0);
  $5 = ((($bit$0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $$sum1 = (($6) + ($0))|0;
  $7 = (($x) + ($$sum1<<2)|0);
  $$sum2 = (($$sum) + 1)|0;
  $8 = (($x) + ($$sum2<<2)|0);
  $9 = +HEAPF32[$8>>2];
  $$sum3 = (($$sum1) + 1)|0;
  $10 = (($x) + ($$sum3<<2)|0);
  $11 = +HEAPF32[$10>>2];
  $12 = $9 - $11;
  $13 = +HEAPF32[$4>>2];
  $14 = +HEAPF32[$7>>2];
  $15 = $14 + $13;
  $16 = +HEAPF32[$T$0>>2];
  $17 = $15 * $16;
  $18 = ((($T$0)) + 4|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $19 * $12;
  $21 = $20 + $17;
  $22 = $19 * $15;
  $23 = $16 * $12;
  $24 = $22 - $23;
  $25 = ((($w1$0)) + -16|0);
  $26 = $11 + $9;
  $27 = $26 * 0.5;
  $28 = $13 - $14;
  $29 = $28 * 0.5;
  $30 = $21 + $27;
  HEAPF32[$w0$0>>2] = $30;
  $31 = $27 - $21;
  $32 = ((($w1$0)) + -8|0);
  HEAPF32[$32>>2] = $31;
  $33 = $24 + $29;
  $34 = ((($w0$0)) + 4|0);
  HEAPF32[$34>>2] = $33;
  $35 = $24 - $29;
  $36 = ((($w1$0)) + -4|0);
  HEAPF32[$36>>2] = $35;
  $37 = ((($bit$0)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $$sum4 = (($38) + ($0))|0;
  $39 = (($x) + ($$sum4<<2)|0);
  $40 = ((($bit$0)) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $$sum5 = (($41) + ($0))|0;
  $42 = (($x) + ($$sum5<<2)|0);
  $$sum6 = (($$sum4) + 1)|0;
  $43 = (($x) + ($$sum6<<2)|0);
  $44 = +HEAPF32[$43>>2];
  $$sum7 = (($$sum5) + 1)|0;
  $45 = (($x) + ($$sum7<<2)|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $44 - $46;
  $48 = +HEAPF32[$39>>2];
  $49 = +HEAPF32[$42>>2];
  $50 = $49 + $48;
  $51 = ((($T$0)) + 8|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $50 * $52;
  $54 = ((($T$0)) + 12|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $55 * $47;
  $57 = $56 + $53;
  $58 = $55 * $50;
  $59 = $52 * $47;
  $60 = $58 - $59;
  $61 = $46 + $44;
  $62 = $61 * 0.5;
  $63 = $48 - $49;
  $64 = $63 * 0.5;
  $65 = $57 + $62;
  $66 = ((($w0$0)) + 8|0);
  HEAPF32[$66>>2] = $65;
  $67 = $62 - $57;
  HEAPF32[$25>>2] = $67;
  $68 = $60 + $64;
  $69 = ((($w0$0)) + 12|0);
  HEAPF32[$69>>2] = $68;
  $70 = $60 - $64;
  $71 = ((($w1$0)) + -12|0);
  HEAPF32[$71>>2] = $70;
  $72 = ((($T$0)) + 16|0);
  $73 = ((($bit$0)) + 16|0);
  $74 = ((($w0$0)) + 16|0);
  $75 = ($74>>>0)<($25>>>0);
  if ($75) {
   $T$0 = $72;$bit$0 = $73;$w0$0 = $74;$w1$0 = $25;
  } else {
   break;
  }
 }
 return;
}