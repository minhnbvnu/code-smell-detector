function _oggpack_read($b,$bits) {
 $b = $b|0;
 $bits = $bits|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi3Z2D = 0, $$pre$phi5Z2D = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits>>>0)>(32);
 do {
  if ($0) {
   $$phi$trans$insert = ((($b)) + 16|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$pre4 = ((($b)) + 4|0);
   $$pre$phi3Z2D = $b;$$pre$phi5Z2D = $$pre4;$56 = $$pre;
  } else {
   $1 = (8 + ($bits<<2)|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ((($b)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($4) + ($bits))|0;
   $6 = HEAP32[$b>>2]|0;
   $7 = ((($b)) + 16|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($8) + -4)|0;
   $10 = ($6|0)<($9|0);
   if (!($10)) {
    $11 = (($5) + 7)|0;
    $12 = $11 >> 3;
    $13 = (($8) - ($12))|0;
    $14 = ($6|0)>($13|0);
    if ($14) {
     $$pre$phi3Z2D = $b;$$pre$phi5Z2D = $3;$56 = $8;
     break;
    }
    $15 = ($5|0)==(0);
    if ($15) {
     $$0 = 0;
     return ($$0|0);
    }
   }
   $16 = ((($b)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = $19 >>> $4;
   $21 = ($5|0)>(8);
   if ($21) {
    $22 = ((($17)) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = (8 - ($4))|0;
    $26 = $24 << $25;
    $27 = $26 | $20;
    $28 = ($5|0)>(16);
    if ($28) {
     $29 = ((($17)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = $30&255;
     $32 = (16 - ($4))|0;
     $33 = $31 << $32;
     $34 = $33 | $27;
     $35 = ($5|0)>(24);
     if ($35) {
      $36 = ((($17)) + 3|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = $37&255;
      $39 = (24 - ($4))|0;
      $40 = $38 << $39;
      $41 = $40 | $34;
      $42 = ($5|0)<(33);
      $43 = ($4|0)==(0);
      $or$cond = $42 | $43;
      if ($or$cond) {
       $ret$0 = $41;
      } else {
       $44 = ((($17)) + 4|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45&255;
       $47 = (32 - ($4))|0;
       $48 = $46 << $47;
       $49 = $48 | $41;
       $ret$0 = $49;
      }
     } else {
      $ret$0 = $34;
     }
    } else {
     $ret$0 = $27;
    }
   } else {
    $ret$0 = $20;
   }
   $50 = $ret$0 & $2;
   $51 = (($5|0) / 8)&-1;
   $52 = (($17) + ($51)|0);
   HEAP32[$16>>2] = $52;
   $53 = (($6) + ($51))|0;
   HEAP32[$b>>2] = $53;
   $54 = $5 & 7;
   HEAP32[$3>>2] = $54;
   $$0 = $50;
   return ($$0|0);
  }
 } while(0);
 $55 = ((($b)) + 12|0);
 HEAP32[$55>>2] = 0;
 HEAP32[$$pre$phi3Z2D>>2] = $56;
 HEAP32[$$pre$phi5Z2D>>2] = 1;
 $$0 = -1;
 return ($$0|0);
}