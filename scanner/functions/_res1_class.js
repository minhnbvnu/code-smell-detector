function _res1_class($vb,$vl,$in,$nonzero,$ch) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 var $$0 = 0, $$max$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $ent$0$lcssa$i = 0, $ent$06$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond25$i = 0, $exitcond26$i = 0, $exitcond27$i = 0, $i$02 = 0, $i$020$i = 0, $i$117$i = 0, $ispos$i = 0, $j$015$i = 0;
 var $k$04$i = 0, $k$1$lcssa$i = 0, $k$18$i = 0, $max$0$lcssa$i = 0, $max$05$i = 0, $neg$i = 0, $or$cond$i = 0, $used$03 = 0, $used$1 = 0, $used$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ch|0)>(0);
 if ($0) {
  $i$02 = 0;$used$03 = 0;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 while(1) {
  $1 = (($nonzero) + ($i$02<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   $used$1 = $used$03;
  } else {
   $4 = (($in) + ($i$02<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($used$03) + 1)|0;
   $7 = (($in) + ($used$03<<2)|0);
   HEAP32[$7>>2] = $5;
   $used$1 = $6;
  }
  $8 = (($i$02) + 1)|0;
  $exitcond = ($8|0)==($ch|0);
  if ($exitcond) {
   $used$1$lcssa = $used$1;
   break;
  } else {
   $i$02 = $8;$used$03 = $used$1;
  }
 }
 $9 = ($used$1$lcssa|0)==(0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = HEAP32[$vl>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($10)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($10)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$10>>2]|0;
 $18 = (($16) - ($17))|0;
 $19 = (($18|0) / ($12|0))&-1;
 $20 = $used$1$lcssa << 2;
 $21 = (__vorbis_block_alloc($vb,$20)|0);
 $22 = (+($12|0));
 $23 = 100.0 / $22;
 $24 = $23;
 $25 = ($used$1$lcssa|0)>(0);
 if ($25) {
  $26 = $19 << 2;
  $i$020$i = 0;
  while(1) {
   $31 = (__vorbis_block_alloc($vb,$26)|0);
   $32 = (($21) + ($i$020$i<<2)|0);
   HEAP32[$32>>2] = $31;
   _memset(($31|0),0,($26|0))|0;
   $33 = (($i$020$i) + 1)|0;
   $exitcond27$i = ($33|0)==($used$1$lcssa|0);
   if ($exitcond27$i) {
    break;
   } else {
    $i$020$i = $33;
   }
  }
 }
 $27 = ($19|0)>(0);
 if ($27) {
  $28 = ($12|0)>(0);
  $29 = (($14) + -1)|0;
  $30 = ($14|0)>(1);
  $i$117$i = 0;
  while(1) {
   $34 = Math_imul($i$117$i, $12)|0;
   $35 = HEAP32[$10>>2]|0;
   $36 = (($35) + ($34))|0;
   if ($25) {
    $j$015$i = 0;
    while(1) {
     if ($28) {
      $37 = (($in) + ($j$015$i<<2)|0);
      $38 = HEAP32[$37>>2]|0;
      $ent$06$i = 0;$k$04$i = 0;$max$05$i = 0;
      while(1) {
       $39 = (($36) + ($k$04$i))|0;
       $40 = (($38) + ($39<<2)|0);
       $41 = HEAP32[$40>>2]|0;
       $ispos$i = ($41|0)>(-1);
       $neg$i = (0 - ($41))|0;
       $42 = $ispos$i ? $41 : $neg$i;
       $43 = ($42|0)>($max$05$i|0);
       $$max$0$i = $43 ? $42 : $max$05$i;
       $44 = (($42) + ($ent$06$i))|0;
       $45 = (($k$04$i) + 1)|0;
       $exitcond$i = ($45|0)==($12|0);
       if ($exitcond$i) {
        $ent$0$lcssa$i = $44;$max$0$lcssa$i = $$max$0$i;
        break;
       } else {
        $ent$06$i = $44;$k$04$i = $45;$max$05$i = $$max$0$i;
       }
      }
     } else {
      $ent$0$lcssa$i = 0;$max$0$lcssa$i = 0;
     }
     $46 = (+($ent$0$lcssa$i|0));
     $47 = $46 * $24;
     $48 = (~~(($47)));
     L29: do {
      if ($30) {
       $k$18$i = 0;
       while(1) {
        $49 = (((($10)) + 2328|0) + ($k$18$i<<2)|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = ($max$0$lcssa$i|0)>($50|0);
        if (!($51)) {
         $52 = (((($10)) + 2584|0) + ($k$18$i<<2)|0);
         $53 = HEAP32[$52>>2]|0;
         $54 = ($53|0)<(0);
         $55 = ($48|0)<($53|0);
         $or$cond$i = $54 | $55;
         if ($or$cond$i) {
          $k$1$lcssa$i = $k$18$i;
          break L29;
         }
        }
        $56 = (($k$18$i) + 1)|0;
        $57 = ($56|0)<($29|0);
        if ($57) {
         $k$18$i = $56;
        } else {
         $k$1$lcssa$i = $56;
         break;
        }
       }
      } else {
       $k$1$lcssa$i = 0;
      }
     } while(0);
     $58 = (($21) + ($j$015$i<<2)|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($59) + ($i$117$i<<2)|0);
     HEAP32[$60>>2] = $k$1$lcssa$i;
     $61 = (($j$015$i) + 1)|0;
     $exitcond25$i = ($61|0)==($used$1$lcssa|0);
     if ($exitcond25$i) {
      break;
     } else {
      $j$015$i = $61;
     }
    }
   }
   $62 = (($i$117$i) + 1)|0;
   $exitcond26$i = ($62|0)==($19|0);
   if ($exitcond26$i) {
    break;
   } else {
    $i$117$i = $62;
   }
  }
 }
 $63 = ((($vl)) + 40|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + 1)|0;
 HEAP32[$63>>2] = $65;
 $$0 = $21;
 return ($$0|0);
}