function _createBuiltInCMap(){return(_createBuiltInCMap=_asyncToGenerator(_regeneratorRuntime().mark((function _callee5(t,r){var o,l,u,d,m;return _regeneratorRuntime().wrap((function _callee5$(k){for(;;)switch(k.prev=k.next){case 0:if("Identity-H"!==t){k.next=4;break}return k.abrupt("return",new w(!1,2));case 4:if("Identity-V"!==t){k.next=6;break}return k.abrupt("return",new w(!0,2));case 6:if(y.includes(t)){k.next=8;break}throw new Error("Unknown CMap name: "+t);case 8:if(r){k.next=10;break}throw new Error("Built-in CMap parameters are not provided.");case 10:k.next=12;return r(t);case 12:o=k.sent;l=o.cMapData;u=o.compressionType;d=new v(!0);if(u!==c.CMapCompressionType.BINARY){k.next=18;break}return k.abrupt("return",(new _).process(l,d,(function(t){return extendCMap(d,r,t)})));case 18:if(u!==c.CMapCompressionType.NONE){k.next=21;break}m=new h.Lexer(new g.Stream(l));return k.abrupt("return",parseCMap(d,m,r,null));case 21:throw new Error("TODO: Only BINARY/NONE CMap compression is currently supported.");case 22:case"end":return k.stop()}}),_callee5)})))).apply(this,arguments)}