function _ZN11btRigidBody18proceedToTransformERK11btTransform(sp)
{
	var i7;
	var fp = sp>>2;
	var r0;
	var r1;
	var r2;
	var r3;
	var r4;
	var r5;
	var r6;
	var r7;
	var r8;
	var r9;
	var r10;
	var r11;
	var r12;
	var r13;
	var r14;
	var r15;
	var r16;
	var r17;
	var r18;
	var r19;
	var r20;
	var r21;
	var r22;
	var r23;
	var r24;
	var r25;
var __label__ = 0;
	i7 = sp + -48;var g0 = i7>>2; // save stack
	r0 = heap32[(fp)];
	r1 = heap32[(fp+1)];
	r2 = heapU8[r0+204];
	r2 = r2 & 3;
	if(r2 ==0) //_LBB678_2
{
	r2 = r0 >> 2;
	r24 = r1 >> 2;
	heap32[(r2+17)] = heap32[(r24)];
	heap32[(r2+18)] = heap32[(r24+1)];
	heap32[(r2+19)] = heap32[(r24+2)];
	heap32[(r2+20)] = heap32[(r24+3)];
	heap32[(r2+21)] = heap32[(r24+4)];
	heap32[(r2+22)] = heap32[(r24+5)];
	heap32[(r2+23)] = heap32[(r24+6)];
	heap32[(r2+24)] = heap32[(r24+7)];
	heap32[(r2+25)] = heap32[(r24+8)];
	heap32[(r2+26)] = heap32[(r24+9)];
	heap32[(r2+27)] = heap32[(r24+10)];
	heap32[(r2+28)] = heap32[(r24+11)];
	heap32[(r2+29)] = heap32[(r24+12)];
	heap32[(r2+30)] = heap32[(r24+13)];
	r15 = (r1 + 4)|0;
	r16 = (r1 + 8)|0;
	r17 = (r1 + 12)|0;
	r18 = (r1 + 16)|0;
	r19 = (r1 + 20)|0;
	r20 = (r1 + 24)|0;
	r21 = (r1 + 28)|0;
	r22 = (r1 + 32)|0;
	r23 = (r1 + 36)|0;
	r3 = (r1 + 40)|0;
	heap32[(fp+-10)] = r3;
	r3 = (r1 + 44)|0;
	heap32[(fp+-4)] = r3;
	r3 = (r1 + 48)|0;
	heap32[(fp+-7)] = r3;
	r3 = (r1 + 52)|0;
	heap32[(fp+-6)] = r3;
	r3 = (r1 + 56)|0;
	heap32[(fp+-9)] = r3;
	r3 = (r1 + 60)|0;
	heap32[(fp+-8)] = r3;
	r3 = (r0 + 4)|0;
	r4 = (r0 + 8)|0;
	r5 = (r0 + 12)|0;
	r6 = (r0 + 16)|0;
	r7 = (r0 + 20)|0;
	r8 = (r0 + 24)|0;
	r9 = (r0 + 28)|0;
	r10 = (r0 + 32)|0;
	r11 = (r0 + 36)|0;
	r12 = (r0 + 40)|0;
	r13 = (r0 + 44)|0;
	r14 = (r0 + 48)|0;
	r25 = (r0 + 52)|0;
	heap32[(fp+-5)] = r25;
	r25 = (r0 + 56)|0;
	heap32[(fp+-3)] = r25;
	r25 = (r0 + 60)|0;
	heap32[(fp+-2)] = r25;
	r25 = (r0 + 64)|0;
	heap32[(fp+-1)] = r25;
	heap32[(r2+31)] = heap32[(r24+14)];
	heap32[(r2+32)] = heap32[(r24+15)];
}
else{
	r2 = r0 >> 2;
	heap32[(r2+17)] = heap32[(r2+1)];
	heap32[(r2+18)] = heap32[(r2+2)];
	heap32[(r2+19)] = heap32[(r2+3)];
	heap32[(r2+20)] = heap32[(r2+4)];
	heap32[(r2+21)] = heap32[(r2+5)];
	heap32[(r2+22)] = heap32[(r2+6)];
	heap32[(r2+23)] = heap32[(r2+7)];
	heap32[(r2+24)] = heap32[(r2+8)];
	heap32[(r2+25)] = heap32[(r2+9)];
	heap32[(r2+26)] = heap32[(r2+10)];
	heap32[(r2+27)] = heap32[(r2+11)];
	heap32[(r2+28)] = heap32[(r2+12)];
	heap32[(r2+29)] = heap32[(r2+13)];
	heap32[(r2+30)] = heap32[(r2+14)];
	r3 = (r0 + 4)|0;
	r4 = (r0 + 8)|0;
	r5 = (r0 + 12)|0;
	r6 = (r0 + 16)|0;
	r7 = (r0 + 20)|0;
	r8 = (r0 + 24)|0;
	r9 = (r0 + 28)|0;
	r10 = (r0 + 32)|0;
	r11 = (r0 + 36)|0;
	r12 = (r0 + 40)|0;
	r13 = (r0 + 44)|0;
	r14 = (r0 + 48)|0;
	r15 = (r0 + 52)|0;
	heap32[(fp+-5)] = r15;
	r15 = (r0 + 56)|0;
	heap32[(fp+-3)] = r15;
	r15 = (r0 + 60)|0;
	heap32[(fp+-2)] = r15;
	r15 = (r0 + 64)|0;
	heap32[(fp+-1)] = r15;
	r15 = (r1 + 4)|0;
	r16 = (r1 + 8)|0;
	r17 = (r1 + 12)|0;
	r18 = (r1 + 16)|0;
	r19 = (r1 + 20)|0;
	r20 = (r1 + 24)|0;
	r21 = (r1 + 28)|0;
	r22 = (r1 + 32)|0;
	r23 = (r1 + 36)|0;
	r24 = (r1 + 40)|0;
	heap32[(fp+-10)] = r24;
	r24 = (r1 + 44)|0;
	heap32[(fp+-4)] = r24;
	r24 = (r1 + 48)|0;
	heap32[(fp+-7)] = r24;
	r24 = (r1 + 52)|0;
	heap32[(fp+-6)] = r24;
	r24 = (r1 + 56)|0;
	heap32[(fp+-9)] = r24;
	r24 = (r1 + 60)|0;
	heap32[(fp+-8)] = r24;
	heap32[(r2+31)] = heap32[(r2+15)];
	heap32[(r2+32)] = heap32[(r2+16)];
}
	r2 = r0 >> 2;
	heap32[(r2+33)] = heap32[(r2+76)];
	heap32[(r2+34)] = heap32[(r2+77)];
	heap32[(r2+35)] = heap32[(r2+78)];
	heap32[(r2+36)] = heap32[(r2+79)];
	heap32[(r2+37)] = heap32[(r2+80)];
	heap32[(r2+38)] = heap32[(r2+81)];
	heap32[(r2+39)] = heap32[(r2+82)];
	r3 = r3 >> 2;
	r1 = r1 >> 2;
	heap32[(r2+40)] = heap32[(r2+83)];
	r2 = r4 >> 2;
	r4 = r15 >> 2;
	heap32[(r3)] = heap32[(r1)];
	r1 = r5 >> 2;
	r3 = r16 >> 2;
	heap32[(r2)] = heap32[(r4)];
	r2 = r6 >> 2;
	r4 = r17 >> 2;
	heap32[(r1)] = heap32[(r3)];
	r1 = r7 >> 2;
	r3 = r18 >> 2;
	heap32[(r2)] = heap32[(r4)];
	r2 = r8 >> 2;
	r4 = r19 >> 2;
	heap32[(r1)] = heap32[(r3)];
	r1 = r9 >> 2;
	r3 = r20 >> 2;
	heap32[(r2)] = heap32[(r4)];
	r2 = r10 >> 2;
	r4 = r21 >> 2;
	heap32[(r1)] = heap32[(r3)];
	r1 = r11 >> 2;
	r3 = r22 >> 2;
	heap32[(r2)] = heap32[(r4)];
	r2 = r12 >> 2;
	r4 = r23 >> 2;
	heap32[(r1)] = heap32[(r3)];
	r1 = r13 >> 2;
	r3 = heap32[(fp+-10)];
	r3 = r3 >> 2;
	heap32[(r2)] = heap32[(r4)];
	r2 = r14 >> 2;
	r4 = heap32[(fp+-4)];
	r4 = r4 >> 2;
	heap32[(r1)] = heap32[(r3)];
	r1 = heap32[(fp+-5)];
	r1 = r1 >> 2;
	r3 = heap32[(fp+-7)];
	r3 = r3 >> 2;
	heap32[(r2)] = heap32[(r4)];
	r2 = heap32[(fp+-3)];
	r2 = r2 >> 2;
	r4 = heap32[(fp+-6)];
	r4 = r4 >> 2;
	heap32[(r1)] = heap32[(r3)];
	r1 = heap32[(fp+-2)];
	r1 = r1 >> 2;
	r3 = heap32[(fp+-9)];
	r3 = r3 >> 2;
	heap32[(r2)] = heap32[(r4)];
	r2 = heap32[(fp+-1)];
	r2 = r2 >> 2;
	r4 = heap32[(fp+-8)];
	r4 = r4 >> 2;
	heap32[(r1)] = heap32[(r3)];
	heap32[(r2)] = heap32[(r4)];
	heap32[(g0)] = r0;
	_ZN11btRigidBody19updateInertiaTensorEv(i7);
	return;
}