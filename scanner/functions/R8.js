function R8(e){var t,r,i,a,n;if(e.peek()===ct.Ber.OID){var s=e.readOID();for(r=Object.keys(B0.curves),i=0;i<r.length;++i)if(a=r[i],n=B0.curves[a],n.pkcs8oid===s){t=a;break}}else{e.readSequence();var o=e.readString(ct.Ber.Integer,!0);Eo.strictEqual(o[0],1,"ECDSA key not version 1");var u={};e.readSequence();var l=e.readOID();Eo.strictEqual(l,"1.2.840.10045.1.1","ECDSA key is not from a prime-field");var p=u.p=Rr.mpNormalize(e.readString(ct.Ber.Integer,!0));u.size=p.length*8-Rr.countZeros(p),e.readSequence(),u.a=Rr.mpNormalize(e.readString(ct.Ber.OctetString,!0)),u.b=Rr.mpNormalize(e.readString(ct.Ber.OctetString,!0)),e.peek()===ct.Ber.BitString&&(u.s=e.readString(ct.Ber.BitString,!0)),u.G=e.readString(ct.Ber.OctetString,!0),Eo.strictEqual(u.G[0],4,"uncompressed G is required"),u.n=Rr.mpNormalize(e.readString(ct.Ber.Integer,!0)),u.h=Rr.mpNormalize(e.readString(ct.Ber.Integer,!0)),Eo.strictEqual(u.h[0],1,"a cofactor=1 curve is required"),r=Object.keys(B0.curves);var c=Object.keys(u);for(i=0;i<r.length;++i){a=r[i],n=B0.curves[a];for(var d=!0,f=0;f<c.length;++f){var m=c[f];if(n[m]!==void 0){if(typeof n[m]=="object"&&n[m].equals!==void 0){if(!n[m].equals(u[m])){d=!1;break}}else if(bl.isBuffer(n[m])){if(n[m].toString("binary")!==u[m].toString("binary")){d=!1;break}}else if(n[m]!==u[m]){d=!1;break}}}if(d){t=a;break}}}return t}