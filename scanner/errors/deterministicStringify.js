function deterministicStringify(obj,replacer,spacer,options){void 0===options&&(options=defaultOptions());var res,tmp=function deterministicDecirc(val,k,edgeIndex,stack,parent,depth,options){var i;if(depth+=1,"object"==typeof val&&null!==val){for(i=0;i<stack.length;i++)if(stack[i]===val)return void setReplace("[Circular]",val,k,parent);try{if("function"==typeof val.toJSON)return}catch(_){return}if(void 0!==options.depthLimit&&depth>options.depthLimit)return void setReplace("[...]",val,k,parent);if(void 0!==options.edgesLimit&&edgeIndex+1>options.edgesLimit)return void setReplace("[...]",val,k,parent);if(stack.push(val),Array.isArray(val))for(i=0;i<val.length;i++)deterministicDecirc(val[i],i,i,stack,val,depth,options);else{var tmp={},keys=Object.keys(val).sort(compareFunction);for(i=0;i<keys.length;i++){var key=keys[i];deterministicDecirc(val[key],key,i,stack,val,depth,options),tmp[key]=val[key]}if(void 0===parent)return tmp;arr.push([parent,k,val]),parent[k]=tmp}stack.pop()}}(obj,"",0,[],void 0,0,options)||obj;try{res=0===replacerStack.length?JSON.stringify(tmp,replacer,spacer):JSON.stringify(tmp,replaceGetterValues(replacer),spacer)}catch(_){return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]")}finally{for(;0!==arr.length;){var part=arr.pop();4===part.length?Object.defineProperty(part[0],part[1],part[3]):part[0][part[1]]=part[2]}}return res}