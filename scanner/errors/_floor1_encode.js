function _floor1_encode($opb,$vb,$look,$post,$ilogmask) {
 $opb = $opb|0;
 $vb = $vb|0;
 $look = $look|0;
 $post = $post|0;
 $ilogmask = $ilogmask|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$0$p$i = 0, $$phi$trans$insert = 0, $$pn$i = 0, $$pre = 0, $$pre50 = 0, $$pre51 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bookas = 0, $cshift$021 = 0;
 var $cshift$021$us = 0, $cval$0$lcssa = 0, $cval$020 = 0, $cval$020$us = 0, $err$04$i = 0, $err$1$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond46 = 0, $exitcond47 = 0, $exitcond48 = 0, $exitcond49 = 0, $hx$0$lcssa = 0, $hx$011 = 0, $hx$1 = 0, $i$040 = 0, $i$135 = 0, $i$231 = 0, $ispos$i = 0, $ispos$i1 = 0;
 var $ispos1$i = 0, $j$027 = 0, $j$110 = 0, $j$29 = 0, $k$016 = 0, $k$122 = 0, $k$122$us = 0, $k$224 = 0, $l$018$us = 0, $l$018$us$lcssa = 0, $lx$012 = 0, $lx$1 = 0, $ly$0$lcssa = 0, $ly$013 = 0, $ly$1 = 0, $maxval = 0, $neg$i = 0, $neg$i2 = 0, $neg2$i = 0, $or$cond = 0;
 var $out = 0, $val$0 = 0, $val1$0 = 0, $x1$n$i = 0, $y$03$i = 0, $y$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $out = sp + 64|0;
 $bookas = sp + 32|0;
 $maxval = sp;
 $0 = ((($look)) + 1296|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($look)) + 1284|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($vb)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 2848|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($post|0)==(0|0);
 if ($12) {
  _oggpack_write($opb,0,1);
  $224 = ((($vb)) + 36|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = (($225|0) / 2)&-1;
  $227 = $226 << 2;
  _memset(($ilogmask|0),0,($227|0))|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ($3|0)>(0);
 if ($13) {
  $14 = ((($1)) + 832|0);
  $i$040 = 0;
  while(1) {
   $15 = (($post) + ($i$040<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $16 & 32767;
   $18 = HEAP32[$14>>2]|0;
   if ((($18|0) == 4)) {
    $22 = $17 >>> 4;
    $val$0 = $22;
   } else if ((($18|0) == 1)) {
    $19 = $17 >>> 2;
    $val$0 = $19;
   } else if ((($18|0) == 2)) {
    $20 = $17 >>> 3;
    $val$0 = $20;
   } else if ((($18|0) == 3)) {
    $21 = (($17>>>0) / 12)&-1;
    $val$0 = $21;
   } else {
    $val$0 = $17;
   }
   $23 = $16 & 32768;
   $24 = $23 | $val$0;
   HEAP32[$15>>2] = $24;
   $25 = (($i$040) + 1)|0;
   $exitcond49 = ($25|0)==($3|0);
   if ($exitcond49) {
    break;
   } else {
    $i$040 = $25;
   }
  }
 }
 $26 = HEAP32[$post>>2]|0;
 HEAP32[$out>>2] = $26;
 $27 = ((($post)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($out)) + 4|0);
 HEAP32[$29>>2] = $28;
 $30 = ($3|0)>(2);
 $31 = ((($look)) + 1292|0);
 if ($30) {
  $i$135 = 2;
  while(1) {
   $32 = (($i$135) + -2)|0;
   $33 = (((($look)) + 1032|0) + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (((($look)) + 780|0) + ($32<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (((($1)) + 836|0) + ($34<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (((($1)) + 836|0) + ($36<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($post) + ($34<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($post) + ($36<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (((($1)) + 836|0) + ($i$135<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $42 & 32767;
   $48 = $44 & 32767;
   $49 = (($48) - ($47))|0;
   $50 = (($40) - ($38))|0;
   $ispos$i = ($49|0)>(-1);
   $neg$i = (0 - ($49))|0;
   $51 = $ispos$i ? $49 : $neg$i;
   $52 = (($46) - ($38))|0;
   $53 = Math_imul($51, $52)|0;
   $54 = (($53|0) / ($50|0))&-1;
   $55 = ($49|0)<(0);
   $56 = (0 - ($54))|0;
   $$0$p$i = $55 ? $56 : $54;
   $$0$i = (($$0$p$i) + ($47))|0;
   $57 = (($post) + ($i$135<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 & 32768;
   $60 = ($59|0)!=(0);
   $61 = ($58|0)==($$0$i|0);
   $or$cond = $60 | $61;
   if ($or$cond) {
    $62 = $$0$i | 32768;
    HEAP32[$57>>2] = $62;
    $63 = (($out) + ($i$135<<2)|0);
    HEAP32[$63>>2] = 0;
   } else {
    $64 = HEAP32[$31>>2]|0;
    $65 = (($64) - ($$0$i))|0;
    $66 = ($65|0)<($$0$i|0);
    $$ = $66 ? $65 : $$0$i;
    $67 = (($58) - ($$0$i))|0;
    $68 = ($67|0)<(0);
    do {
     if ($68) {
      $69 = (0 - ($$))|0;
      $70 = ($67|0)<($69|0);
      if ($70) {
       $71 = $67 ^ -1;
       $72 = (($$) + ($71))|0;
       $val1$0 = $72;
       break;
      } else {
       $73 = $67 << 1;
       $74 = $73 ^ -1;
       $val1$0 = $74;
       break;
      }
     } else {
      $75 = ($$|0)>($67|0);
      if ($75) {
       $77 = $67 << 1;
       $val1$0 = $77;
       break;
      } else {
       $76 = (($$) + ($67))|0;
       $val1$0 = $76;
       break;
      }
     }
    } while(0);
    $78 = (($out) + ($i$135<<2)|0);
    HEAP32[$78>>2] = $val1$0;
    HEAP32[$41>>2] = $47;
    $79 = HEAP32[$43>>2]|0;
    $80 = $79 & 32767;
    HEAP32[$43>>2] = $80;
   }
   $81 = (($i$135) + 1)|0;
   $exitcond48 = ($81|0)==($3|0);
   if ($exitcond48) {
    break;
   } else {
    $i$135 = $81;
   }
  }
  $$pre = HEAP32[$out>>2]|0;
  $$pre50 = HEAP32[$29>>2]|0;
  $95 = $$pre;$99 = $$pre50;
 } else {
  $95 = $26;$99 = $28;
 }
 _oggpack_write($opb,1,1);
 $82 = ((($look)) + 1308|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) + 1)|0;
 HEAP32[$82>>2] = $84;
 $85 = HEAP32[$31>>2]|0;
 $86 = (($85) + -1)|0;
 $87 = (_ov_ilog($86)|0);
 $88 = $87 << 1;
 $89 = ((($look)) + 1304|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($90) + ($88))|0;
 HEAP32[$89>>2] = $91;
 $92 = HEAP32[$31>>2]|0;
 $93 = (($92) + -1)|0;
 $94 = (_ov_ilog($93)|0);
 _oggpack_write($opb,$95,$94);
 $96 = HEAP32[$31>>2]|0;
 $97 = (($96) + -1)|0;
 $98 = (_ov_ilog($97)|0);
 _oggpack_write($opb,$99,$98);
 $100 = HEAP32[$1>>2]|0;
 $101 = ($100|0)>(0);
 if ($101) {
  $102 = ((($look)) + 1300|0);
  $i$231 = 0;$j$027 = 2;
  while(1) {
   $103 = (((($1)) + 4|0) + ($i$231<<2)|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (((($1)) + 128|0) + ($104<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (((($1)) + 192|0) + ($104<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = 1 << $108;
   ;HEAP32[$bookas>>2]=0|0;HEAP32[$bookas+4>>2]=0|0;HEAP32[$bookas+8>>2]=0|0;HEAP32[$bookas+12>>2]=0|0;HEAP32[$bookas+16>>2]=0|0;HEAP32[$bookas+20>>2]=0|0;HEAP32[$bookas+24>>2]=0|0;HEAP32[$bookas+28>>2]=0|0;
   $110 = ($108|0)==(0);
   if (!($110)) {
    ;HEAP32[$maxval>>2]=0|0;HEAP32[$maxval+4>>2]=0|0;HEAP32[$maxval+8>>2]=0|0;HEAP32[$maxval+12>>2]=0|0;HEAP32[$maxval+16>>2]=0|0;HEAP32[$maxval+20>>2]=0|0;HEAP32[$maxval+24>>2]=0|0;HEAP32[$maxval+28>>2]=0|0;
    $111 = ($108|0)==(31);
    if (!($111)) {
     $k$016 = 0;
     while(1) {
      $127 = ((((($1)) + 320|0) + ($104<<5)|0) + ($k$016<<2)|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = ($128|0)<(0);
      if ($129) {
       $$sink = 1;
      } else {
       $130 = (((($9)) + 1824|0) + ($128<<2)|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = ((($131)) + 4|0);
       $133 = HEAP32[$132>>2]|0;
       $$sink = $133;
      }
      $134 = (($maxval) + ($k$016<<2)|0);
      HEAP32[$134>>2] = $$sink;
      $135 = (($k$016) + 1)|0;
      $136 = ($135|0)<($109|0);
      if ($136) {
       $k$016 = $135;
      } else {
       break;
      }
     }
    }
    $112 = ($106|0)>(0);
    L48: do {
     if ($112) {
      if ($111) {
       $cshift$021 = 0;$cval$020 = 0;$k$122 = 0;
       while(1) {
        $137 = (($bookas) + ($k$122<<2)|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = $138 << $cshift$021;
        $140 = $139 | $cval$020;
        $141 = (($cshift$021) + 31)|0;
        $142 = (($k$122) + 1)|0;
        $exitcond = ($142|0)==($106|0);
        if ($exitcond) {
         $cval$0$lcssa = $140;
         break L48;
        } else {
         $cshift$021 = $141;$cval$020 = $140;$k$122 = $142;
        }
       }
      } else {
       $cshift$021$us = 0;$cval$020$us = 0;$k$122$us = 0;
      }
      while(1) {
       $125 = (($k$122$us) + ($j$027))|0;
       $126 = (($out) + ($125<<2)|0);
       $115 = HEAP32[$126>>2]|0;
       $l$018$us = 0;
       while(1) {
        $113 = (($maxval) + ($l$018$us<<2)|0);
        $114 = HEAP32[$113>>2]|0;
        $116 = ($115|0)<($114|0);
        if ($116) {
         $l$018$us$lcssa = $l$018$us;
         label = 31;
         break;
        }
        $117 = (($l$018$us) + 1)|0;
        $118 = ($117|0)<($109|0);
        if ($118) {
         $l$018$us = $117;
        } else {
         label = 33;
         break;
        }
       }
       if ((label|0) == 31) {
        label = 0;
        $119 = (($bookas) + ($k$122$us<<2)|0);
        HEAP32[$119>>2] = $l$018$us$lcssa;
        $121 = $l$018$us$lcssa;
       }
       else if ((label|0) == 33) {
        label = 0;
        $$phi$trans$insert = (($bookas) + ($k$122$us<<2)|0);
        $$pre51 = HEAP32[$$phi$trans$insert>>2]|0;
        $121 = $$pre51;
       }
       $120 = $121 << $cshift$021$us;
       $122 = $120 | $cval$020$us;
       $123 = (($cshift$021$us) + ($108))|0;
       $124 = (($k$122$us) + 1)|0;
       $exitcond47 = ($124|0)==($106|0);
       if ($exitcond47) {
        $cval$0$lcssa = $122;
        break;
       } else {
        $cshift$021$us = $123;$cval$020$us = $122;$k$122$us = $124;
       }
      }
     } else {
      $cval$0$lcssa = 0;
     }
    } while(0);
    $143 = (((($1)) + 256|0) + ($104<<2)|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (($11) + (($144*56)|0)|0);
    $146 = (_vorbis_book_encode($145,$cval$0$lcssa,$opb)|0);
    $147 = HEAP32[$102>>2]|0;
    $148 = (($147) + ($146))|0;
    HEAP32[$102>>2] = $148;
   }
   $149 = ($106|0)>(0);
   if ($149) {
    $k$224 = 0;
    while(1) {
     $150 = (($bookas) + ($k$224<<2)|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ((((($1)) + 320|0) + ($104<<5)|0) + ($151<<2)|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)>(-1);
     if ($154) {
      $155 = (($k$224) + ($j$027))|0;
      $156 = (($out) + ($155<<2)|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = (((($11) + (($153*56)|0)|0)) + 4|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($157|0)<($159|0);
      if ($160) {
       $161 = (($11) + (($153*56)|0)|0);
       $162 = (_vorbis_book_encode($161,$157,$opb)|0);
       $163 = HEAP32[$89>>2]|0;
       $164 = (($163) + ($162))|0;
       HEAP32[$89>>2] = $164;
      }
     }
     $165 = (($k$224) + 1)|0;
     $exitcond46 = ($165|0)==($106|0);
     if ($exitcond46) {
      break;
     } else {
      $k$224 = $165;
     }
    }
   }
   $166 = (($106) + ($j$027))|0;
   $167 = (($i$231) + 1)|0;
   $168 = HEAP32[$1>>2]|0;
   $169 = ($167|0)<($168|0);
   if ($169) {
    $i$231 = $167;$j$027 = $166;
   } else {
    break;
   }
  }
 }
 $170 = HEAP32[$post>>2]|0;
 $171 = ((($1)) + 832|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = Math_imul($172, $170)|0;
 $174 = ((($vb)) + 28|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = (($9) + ($175<<2)|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = (($177|0) / 2)&-1;
 $179 = HEAP32[$2>>2]|0;
 $180 = ($179|0)>(1);
 if ($180) {
  $hx$011 = 0;$j$110 = 1;$lx$012 = 0;$ly$013 = $173;
  while(1) {
   $185 = (((($look)) + 260|0) + ($j$110<<2)|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = (($post) + ($186<<2)|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = $188 & 32767;
   $190 = ($189|0)==($188|0);
   if ($190) {
    $191 = HEAP32[$171>>2]|0;
    $192 = Math_imul($191, $188)|0;
    $193 = (((($1)) + 836|0) + ($186<<2)|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = (($192) - ($ly$013))|0;
    $196 = (($194) - ($lx$012))|0;
    $ispos$i1 = ($195|0)>(-1);
    $neg$i2 = (0 - ($195))|0;
    $197 = $ispos$i1 ? $195 : $neg$i2;
    $198 = (($195|0) / ($196|0))&-1;
    $199 = $195 >> 31;
    $200 = $199 | 1;
    $201 = Math_imul($198, $196)|0;
    $ispos1$i = ($201|0)>(-1);
    $neg2$i = (0 - ($201))|0;
    $202 = $ispos1$i ? $201 : $neg2$i;
    $203 = (($197) - ($202))|0;
    $204 = ($178|0)>($194|0);
    $x1$n$i = $204 ? $194 : $178;
    $205 = ($x1$n$i|0)>($lx$012|0);
    if ($205) {
     $206 = (($ilogmask) + ($lx$012<<2)|0);
     HEAP32[$206>>2] = $ly$013;
    }
    $207 = (($lx$012) + 1)|0;
    $208 = ($207|0)<($x1$n$i|0);
    if ($208) {
     $214 = $207;$err$04$i = 0;$y$03$i = $ly$013;
     while(1) {
      $209 = (($err$04$i) + ($203))|0;
      $210 = ($209|0)<($196|0);
      $211 = $210 ? 0 : $200;
      $212 = $210 ? 0 : $196;
      $err$1$i = (($209) - ($212))|0;
      $$pn$i = (($y$03$i) + ($198))|0;
      $y$1$i = (($$pn$i) + ($211))|0;
      $213 = (($ilogmask) + ($214<<2)|0);
      HEAP32[$213>>2] = $y$1$i;
      $215 = (($214) + 1)|0;
      $exitcond$i = ($215|0)==($x1$n$i|0);
      if ($exitcond$i) {
       $hx$1 = $194;$lx$1 = $194;$ly$1 = $192;
       break;
      } else {
       $214 = $215;$err$04$i = $err$1$i;$y$03$i = $y$1$i;
      }
     }
    } else {
     $hx$1 = $194;$lx$1 = $194;$ly$1 = $192;
    }
   } else {
    $hx$1 = $hx$011;$lx$1 = $lx$012;$ly$1 = $ly$013;
   }
   $216 = (($j$110) + 1)|0;
   $217 = HEAP32[$2>>2]|0;
   $218 = ($216|0)<($217|0);
   if ($218) {
    $hx$011 = $hx$1;$j$110 = $216;$lx$012 = $lx$1;$ly$013 = $ly$1;
   } else {
    $hx$0$lcssa = $hx$1;$ly$0$lcssa = $ly$1;
    break;
   }
  }
 } else {
  $hx$0$lcssa = 0;$ly$0$lcssa = $173;
 }
 $181 = ((($vb)) + 36|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = (($182|0) / 2)&-1;
 $184 = ($hx$0$lcssa|0)<($183|0);
 if ($184) {
  $j$29 = $hx$0$lcssa;
 } else {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $219 = (($ilogmask) + ($j$29<<2)|0);
  HEAP32[$219>>2] = $ly$0$lcssa;
  $220 = (($j$29) + 1)|0;
  $221 = HEAP32[$181>>2]|0;
  $222 = (($221|0) / 2)&-1;
  $223 = ($220|0)<($222|0);
  if ($223) {
   $j$29 = $220;
  } else {
   $$0 = 1;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}