function __make_words($l,$n,$sparsecount) {
 $l = $l|0;
 $n = $n|0;
 $sparsecount = $sparsecount|0;
 var $$0 = 0, $$lcssa47 = 0, $$phi$trans$insert = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $count$024 = 0, $count$1 = 0, $count$1$lcssa = 0, $count$212 = 0, $count$212$us = 0, $count$3$us = 0;
 var $entry$020 = 0, $exitcond = 0, $exitcond34 = 0, $i$025 = 0, $i$114 = 0, $i$213 = 0, $i$213$us = 0, $j$015$lcssa = 0, $j$01549 = 0, $j$1 = 0, $j$1$in19 = 0, $j$1$in19$phi = 0, $j$118 = 0, $j$121 = 0, $j$29 = 0, $j$29$us = 0, $marker = 0, $or$cond = 0, $phitmp = 0, $temp$0$lcssa = 0;
 var $temp$0$lcssa$us = 0, $temp$010 = 0, $temp$010$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $marker = sp;
 $0 = ($sparsecount|0)!=(0);
 $1 = $0 ? $sparsecount : $n;
 $2 = $1 << 2;
 $3 = (_malloc($2)|0);
 _memset(($marker|0),0,132)|0;
 $4 = ($n|0)>(0);
 do {
  if ($4) {
   $5 = ((($marker)) + 4|0);
   $6 = ($sparsecount|0)==(0);
   $7 = $6&1;
   $count$024 = 0;$i$025 = 0;
   L3: while(1) {
    $8 = (($l) + ($i$025)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9 << 24 >> 24;
    $11 = ($9<<24>>24)>(0);
    L5: do {
     if ($11) {
      $12 = (($marker) + ($10<<2)|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = ($9<<24>>24)>(31);
      $15 = $13 >>> $10;
      $16 = ($15|0)==(0);
      $or$cond = $14 | $16;
      if (!($or$cond)) {
       label = 5;
       break L3;
      }
      $17 = (($3) + ($count$024<<2)|0);
      HEAP32[$17>>2] = $13;
      $18 = (($marker) + ($10<<2)|0);
      $19 = $13 & 1;
      $20 = ($19|0)==(0);
      L8: do {
       if ($20) {
        $30 = $13;$31 = $18;$j$01549 = $10;
        while(1) {
         $29 = (($30) + 1)|0;
         HEAP32[$31>>2] = $29;
         $32 = (($j$01549) + -1)|0;
         $33 = ($j$01549|0)>(1);
         if (!($33)) {
          break L8;
         }
         $$phi$trans$insert = (($marker) + ($32<<2)|0);
         $$pre = HEAP32[$$phi$trans$insert>>2]|0;
         $34 = (($marker) + ($32<<2)|0);
         $35 = $$pre & 1;
         $36 = ($35|0)==(0);
         if ($36) {
          $30 = $$pre;$31 = $34;$j$01549 = $32;
         } else {
          $$lcssa47 = $34;$j$015$lcssa = $32;
          label = 8;
          break;
         }
        }
       } else {
        $$lcssa47 = $18;$j$015$lcssa = $10;
        label = 8;
       }
      } while(0);
      do {
       if ((label|0) == 8) {
        label = 0;
        $22 = ($j$015$lcssa|0)==(1);
        if ($22) {
         $23 = HEAP32[$5>>2]|0;
         $24 = (($23) + 1)|0;
         HEAP32[$5>>2] = $24;
         break;
        } else {
         $25 = (($j$015$lcssa) + -1)|0;
         $26 = (($marker) + ($25<<2)|0);
         $27 = HEAP32[$26>>2]|0;
         $28 = $27 << 1;
         HEAP32[$$lcssa47>>2] = $28;
         break;
        }
       }
      } while(0);
      $j$118 = (($10) + 1)|0;
      $21 = ($j$118|0)<(33);
      if ($21) {
       $entry$020 = $13;$j$1$in19 = $10;$j$121 = $j$118;
       while(1) {
        $37 = (($marker) + ($j$121<<2)|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = $38 >>> 1;
        $40 = ($39|0)==($entry$020|0);
        if (!($40)) {
         $$pn = 1;
         break L5;
        }
        $41 = (($marker) + ($j$1$in19<<2)|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = $42 << 1;
        HEAP32[$37>>2] = $43;
        $j$1 = (($j$121) + 1)|0;
        $44 = ($j$1|0)<(33);
        if ($44) {
         $j$1$in19$phi = $j$121;$entry$020 = $38;$j$121 = $j$1;$j$1$in19 = $j$1$in19$phi;
        } else {
         $$pn = 1;
         break;
        }
       }
      } else {
       $$pn = 1;
      }
     } else {
      $$pn = $7;
     }
    } while(0);
    $count$1 = (($count$024) + ($$pn))|0;
    $45 = (($i$025) + 1)|0;
    $46 = ($45|0)<($n|0);
    if ($46) {
     $count$024 = $count$1;$i$025 = $45;
    } else {
     $count$1$lcssa = $count$1;
     label = 16;
     break;
    }
   }
   if ((label|0) == 5) {
    _free($3);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 16) {
    $phitmp = ($count$1$lcssa|0)==(1);
    if (!($phitmp)) {
     $i$114 = 1;
     label = 27;
     break;
    }
    $47 = ((($marker)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)==(2);
    if ($49) {
     break;
    } else {
     $i$114 = 1;
     label = 27;
     break;
    }
   }
  } else {
   $i$114 = 1;
   label = 27;
  }
 } while(0);
 L27: do {
  if ((label|0) == 27) {
   while(1) {
    label = 0;
    $68 = (($marker) + ($i$114<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (32 - ($i$114))|0;
    $71 = -1 >>> $70;
    $72 = $69 & $71;
    $73 = ($72|0)==(0);
    $66 = (($i$114) + 1)|0;
    if (!($73)) {
     break;
    }
    $67 = ($66|0)<(33);
    if ($67) {
     $i$114 = $66;
     label = 27;
    } else {
     break L27;
    }
   }
   _free($3);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 if ($0) {
  $count$212$us = 0;$i$213$us = 0;
 } else {
  $count$212 = 0;$i$213 = 0;
  while(1) {
   $74 = (($l) + ($i$213)|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = ($75<<24>>24)>(0);
   if ($76) {
    $77 = (($3) + ($count$212<<2)|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = $75 << 24 >> 24;
    $j$29 = 0;$temp$010 = 0;
    while(1) {
     $80 = $temp$010 << 1;
     $81 = $78 >>> $j$29;
     $82 = $81 & 1;
     $83 = $82 | $80;
     $84 = (($j$29) + 1)|0;
     $85 = ($84|0)<($79|0);
     if ($85) {
      $j$29 = $84;$temp$010 = $83;
     } else {
      $temp$0$lcssa = $83;
      break;
     }
    }
   } else {
    $temp$0$lcssa = 0;
   }
   $86 = (($count$212) + 1)|0;
   $87 = (($3) + ($count$212<<2)|0);
   HEAP32[$87>>2] = $temp$0$lcssa;
   $88 = (($i$213) + 1)|0;
   $exitcond = ($88|0)==($n|0);
   if ($exitcond) {
    $$0 = $3;
    break;
   } else {
    $count$212 = $86;$i$213 = $88;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $50 = (($l) + ($i$213$us)|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = ($51<<24>>24)>(0);
  if ($52) {
   $65 = (($3) + ($count$212$us<<2)|0);
   $59 = HEAP32[$65>>2]|0;
   $64 = $51 << 24 >> 24;
   $j$29$us = 0;$temp$010$us = 0;
   while(1) {
    $57 = $temp$010$us << 1;
    $58 = $59 >>> $j$29$us;
    $60 = $58 & 1;
    $61 = $60 | $57;
    $62 = (($j$29$us) + 1)|0;
    $63 = ($62|0)<($64|0);
    if ($63) {
     $j$29$us = $62;$temp$010$us = $61;
    } else {
     $temp$0$lcssa$us = $61;
     break;
    }
   }
  } else {
   $temp$0$lcssa$us = 0;
  }
  $53 = ($51<<24>>24)==(0);
  if ($53) {
   $count$3$us = $count$212$us;
  } else {
   $54 = (($count$212$us) + 1)|0;
   $55 = (($3) + ($count$212$us<<2)|0);
   HEAP32[$55>>2] = $temp$0$lcssa$us;
   $count$3$us = $54;
  }
  $56 = (($i$213$us) + 1)|0;
  $exitcond34 = ($56|0)==($n|0);
  if ($exitcond34) {
   $$0 = $3;
   break;
  } else {
   $count$212$us = $count$3$us;$i$213$us = $56;
  }
 }
 STACKTOP = sp;return ($$0|0);
}