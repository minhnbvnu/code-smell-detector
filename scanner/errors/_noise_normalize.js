function _noise_normalize($p$0$1$val,$limit,$r,$q,$f,$flags,$i,$n,$out) {
 $p$0$1$val = $p$0$1$val|0;
 $limit = $limit|0;
 $r = $r|0;
 $q = $q|0;
 $f = $f|0;
 $flags = $flags|0;
 $i = $i|0;
 $n = $n|0;
 $out = $out|0;
 var $$06 = 0.0, $$1 = 0.0, $$1$lcssa = 0.0, $$22 = 0.0, $$3 = 0.0, $$4 = 0.0, $$alloca_mul = 0, $$sink = 0, $$sink$in = 0.0, $$sink17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $9 = 0, $count$03 = 0, $count$1 = 0, $count$1$lcssa = 0, $exitcond = 0;
 var $exitcond15 = 0, $exitcond16 = 0, $j$0$lcssa = 0, $j$010 = 0, $j$14 = 0, $j$21 = 0, $n$ = 0, $or$cond = 0, $or$cond18 = 0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 2;
 $$alloca_mul = $0;
 $1 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $2 = ((($p$0$1$val)) + 500|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $8 = $n;
 } else {
  $5 = ((($p$0$1$val)) + 504|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) - ($i))|0;
  $8 = $7;
 }
 $9 = ($8|0)>($n|0);
 $n$ = $9 ? $n : $8;
 $10 = ($n$|0)>(0);
 if ($10) {
  $11 = ($flags|0)==(0|0);
  $12 = ($8|0)<($n|0);
  $13 = $12 ? $8 : $n;
  $j$010 = 0;
  while(1) {
   if ($11) {
    label = 9;
   } else {
    $17 = (($flags) + ($j$010<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(0);
    if ($19) {
     label = 9;
    }
   }
   do {
    if ((label|0) == 9) {
     label = 0;
     $20 = (($q) + ($j$010<<2)|0);
     $21 = +HEAPF32[$20>>2];
     $22 = (($f) + ($j$010<<2)|0);
     $23 = +HEAPF32[$22>>2];
     $24 = $21 / $23;
     $25 = (($r) + ($j$010<<2)|0);
     $26 = +HEAPF32[$25>>2];
     $27 = $26 < 0.0;
     $28 = $24;
     $29 = (+Math_sqrt((+$28)));
     $30 = (+_rint($29));
     if ($27) {
      $31 = -$30;
      $32 = (~~(($31)));
      $33 = (($out) + ($j$010<<2)|0);
      HEAP32[$33>>2] = $32;
      break;
     } else {
      $34 = (~~(($30)));
      $35 = (($out) + ($j$010<<2)|0);
      HEAP32[$35>>2] = $34;
      break;
     }
    }
   } while(0);
   $36 = (($j$010) + 1)|0;
   $exitcond16 = ($36|0)==($13|0);
   if ($exitcond16) {
    $j$0$lcssa = $13;
    break;
   } else {
    $j$010 = $36;
   }
  }
 } else {
  $j$0$lcssa = 0;
 }
 $14 = ($j$0$lcssa|0)<($n|0);
 if (!($14)) {
  $$4 = 0.0;
  STACKTOP = sp;return (+$$4);
 }
 $15 = ($flags|0)!=(0|0);
 $16 = (($limit) - ($i))|0;
 $$06 = 0.0;$count$03 = 0;$j$14 = $j$0$lcssa;
 while(1) {
  if ($15) {
   $37 = (($flags) + ($j$14<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    label = 15;
   } else {
    $$1 = $$06;$count$1 = $count$03;
   }
  } else {
   label = 15;
  }
  do {
   if ((label|0) == 15) {
    label = 0;
    $40 = (($q) + ($j$14<<2)|0);
    $41 = +HEAPF32[$40>>2];
    $42 = (($f) + ($j$14<<2)|0);
    $43 = +HEAPF32[$42>>2];
    $44 = $41 / $43;
    $45 = !($44 < 0.25);
    $46 = ($j$14|0)<($16|0);
    $or$cond = $15 & $46;
    $or$cond18 = $45 | $or$cond;
    if ($or$cond18) {
     $50 = (($r) + ($j$14<<2)|0);
     $51 = +HEAPF32[$50>>2];
     $52 = $51 < 0.0;
     $53 = $44;
     $54 = (+Math_sqrt((+$53)));
     $55 = (+_rint($54));
     $56 = -$55;
     $$sink$in = $52 ? $56 : $55;
     $$sink = (~~(($$sink$in)));
     $57 = (($out) + ($j$14<<2)|0);
     HEAP32[$57>>2] = $$sink;
     $58 = Math_imul($$sink, $$sink)|0;
     $59 = (+($58|0));
     $60 = +HEAPF32[$42>>2];
     $61 = $59 * $60;
     HEAPF32[$40>>2] = $61;
     $$1 = $$06;$count$1 = $count$03;
     break;
    } else {
     $47 = $44 + $$06;
     $48 = (($count$03) + 1)|0;
     $49 = (($1) + ($count$03<<2)|0);
     HEAP32[$49>>2] = $40;
     $$1 = $47;$count$1 = $48;
     break;
    }
   }
  } while(0);
  $62 = (($j$14) + 1)|0;
  $exitcond15 = ($62|0)==($n|0);
  if ($exitcond15) {
   $$1$lcssa = $$1;$count$1$lcssa = $count$1;
   break;
  } else {
   $$06 = $$1;$count$03 = $count$1;$j$14 = $62;
  }
 }
 $63 = ($count$1$lcssa|0)==(0);
 if ($63) {
  $$4 = $$1$lcssa;
  STACKTOP = sp;return (+$$4);
 }
 _qsort($1,$count$1$lcssa,4,9);
 $64 = ($count$1$lcssa|0)>(0);
 if (!($64)) {
  $$4 = $$1$lcssa;
  STACKTOP = sp;return (+$$4);
 }
 $65 = $q;
 $66 = ((($p$0$1$val)) + 512|0);
 $67 = +HEAPF64[$66>>3];
 $$22 = $$1$lcssa;$j$21 = 0;
 while(1) {
  $68 = (($1) + ($j$21<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $69;
  $71 = (($70) - ($65))|0;
  $72 = $71 >> 2;
  $73 = $$22;
  $74 = !($73 >= $67);
  if ($74) {
   $$3 = $$22;$$sink17 = 0;$storemerge = 0.0;
  } else {
   $75 = (($r) + ($72<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $76 & -2147483648;
   $78 = $77 | 1065353216;
   $79 = (HEAP32[tempDoublePtr>>2]=$78,+HEAPF32[tempDoublePtr>>2]);
   $80 = (~~(($79)));
   $81 = $$22 + -1.0;
   $82 = (($f) + ($72<<2)|0);
   $83 = +HEAPF32[$82>>2];
   $$3 = $81;$$sink17 = $80;$storemerge = $83;
  }
  $84 = (($out) + ($72<<2)|0);
  HEAP32[$84>>2] = $$sink17;
  HEAPF32[$69>>2] = $storemerge;
  $85 = (($j$21) + 1)|0;
  $exitcond = ($85|0)==($count$1$lcssa|0);
  if ($exitcond) {
   $$4 = $$3;
   break;
  } else {
   $$22 = $$3;$j$21 = $85;
  }
 }
 STACKTOP = sp;return (+$$4);
}